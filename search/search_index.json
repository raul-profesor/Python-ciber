{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Apuntes de Python para ciberseguridad.</p>"},{"location":"SQLi/","title":"Busquemos inyecciones SQL","text":"<p>Vamos a escribir un script que detecte la forma m\u00e1s simple de inyecci\u00f3n SQL a modo de prueba de concepto. Probar\u00e1 a a\u00f1adir una comilla o dobles comillas en la URL y parsear la respuesta en busca de alg\u00fan error de base de datos, lo cual nos permite deducir que puede haber una potencial vulnerabilidad SQLi.</p> <p>As\u00ed las cosas, sigamos una serie de pasos para construir por partes nuestro script. Lo primero ser\u00eda iniciar nuestro entorno virtual e instalar ah\u00ed las dependencias que necesitaremos si es que no las ten\u00edamos todav\u00eda:</p> <pre><code>pipenv shell\npipenv install requests bs4\n</code></pre> <p>Ahora, debemos importar los m\u00f3dulos que vamos a necesitar en nuestro script:</p> <pre><code>import requests\nfrom bs4 import BeautifulSoup as bs\nfrom urllib.parse import urljoin\nfrom pprint import pprint\ns = requests.Session()\ns.headers[\"User-Agent\"] = \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.106 Safari/537.36\"\n</code></pre> <ul> <li><code>requests</code> para realizar las peticiones HTTP</li> <li><code>BeautifulSoup</code> para parsear el contenido de las p\u00e1ginas web</li> <li><code>urllib.parse</code> para dividir las URLs en fragmentos y <code>urljoin</code> permite construir URLs</li> <li><code>pprint</code> para imprimir datos de forma \"bonita\"</li> </ul> <p>Tambi\u00e9n inicializamos la sesi\u00f3n de <code>requests</code> y establecemos el user-agent del \"navegador\".</p> <p>Puesto que la inyecci\u00f3n SQL se basa en las entradas o inputs del usuario, necesitaremos extraer primero los formularios de la web. </p> <pre><code>def get_all_forms(_______): # (1)\nsoup = bs(s.get(_______).content, \"_______\")\nreturn soup.find_all(\"form\")\ndef get_form_details(_______): # (2)    \ndetails = {}\ntry: # (3)\naction = form.attrs.get(\"action\").lower()\nexcept:\naction = None\nmethod = form.attrs.get(\"method\").lower() # (4)\ninputs = [] # (5)\nfor input_tag in _______.find_all(\"input\"):\ninput_type = input_tag.attrs.get(\"type\", \"text\")\ninput_name = input_tag.attrs.get(\"name\")\ninput_value = input_tag.attrs.get(\"value\", \"\")\ninputs.append({\"type\": input_type, \"name\": input_name, \"value\": input_value})\ndetails[\"action\"] = action # (6)\ndetails[\"method\"] = method\ndetails[\"inputs\"] = inputs\nreturn _______\n</code></pre> <ol> <li>Dada una 'url'. devuelve todos los formularios  que contiene el c\u00f3digo HTML</li> <li>Esta funci\u00f3n extrae toda la posible informaci\u00f3n \u00fatil de un formulario HTML</li> <li>Se extrae el atributo form action de la URL objetivo</li> <li>Obtenemos el m\u00e9todo HTTP utilizado por el formulario (POST, GET ...)</li> <li>Se obtienen todos los detalles de los datos de entrada, tales como el tipo y el nombre</li> <li>Guardamos todos los resultados en un diccionario</li> </ol> <p><code>get_all_forms()</code> utiliza BeautifulSoup para extraer todas las etiquetas/tags del c\u00f3digo HTML y devolerlas en forma de lista, mientras que la funci\u00f3n <code>get_form_details()</code> recibe una etiqueta \u00fanica del formulario como argumento y parsea la informaci\u00f3n \u00fatil del mismo.</p> <p>A continuaci\u00f3n definiremos una funci\u00f3n que nos dir\u00e1 si una p\u00e1gina contiene errores SQL, lo cual nos ser\u00e1 \u00fatil para comprobar si existe una vulnerabilidad del tipo SQL injection.</p> <pre><code>def es_vulnerable(_______): # (1)\nerrors = { \n# MySQL\n\"you have an error in your sql syntax;\",\n\"warning: mysql\",\n# SQL Server\n\"unclosed quotation mark after the character string\",\n# Oracle\n\"quoted string not properly terminated\",\n}\nfor error in errors: \n# Si se encuentra algunos de estos errores, devuelve True\nif error in respuesta.content.decode().lower():\nreturn True\n# No se ha detectado error\nreturn False\n</code></pre> <ol> <li>Una simple funci\u00f3n booleana que determina si una p\u00e1gina es vulnerable a un SQL injection analizando su respuesta</li> </ol> <p>Obviamente no podemos definir errores para todos los servidores de bases de datos. Para abarcar el m\u00e1ximo n\u00famero de posibilidades de tipos de error, deber\u00edamos hacer uso de las expresiones regulares.</p> <pre><code>def scan_sql_injection(_______):\n# probar en la URL\nfor c in \"\\\"'\":\n# a\u00f1adir comillas o dobles comillas a la URL\nnew_url = f\"{url}{c}\"\nprint(\"[!] Probando\", new_url)\n# \"fabricamos\" la petici\u00f3n HTTP\nres = s.get(_______)\nif es_vulnerable(res): #(1)\nprint(\"[+] Vulnerabilidad SQL Injection detectada, link:\", _______)\nreturn\n# probamos los fomularios HTML\nforms = get_all_forms(_______)\nprint(f\"[+] Detectados {len(forms)} formularios en {url}.\")\nfor form in _______:\nform_details = get_form_details(_______)\nfor c in \"\\\"'\":\n# los datos del cuerpo de la petici\u00f3n que queremos enviar\ndata = {}\nfor input_tag in _______[\"inputs\"]:\nif input_tag[\"value\"] or input_tag[\"type\"] == \"hidden\": # (2)\ntry:\ndata[input_tag[\"name\"]] = input_tag[\"value\"] + c\nexcept:\npass\nelif input_tag[\"type\"] != \"submit\":\n#todos los tipos excepto *submit*, usando datos basura como \n#caract\u00e9res especiales\ndata[input_tag[\"name\"]] = f\"test{c}\"\nurl = urljoin(_______, form_details[\"action\"]) # (3)\nif form_details[\"method\"] == \"post\":\nres = s.post(_______, data=data)\nelif form_details[\"method\"] == \"get\":\nres = s.get(_______, params=data)\n# comprobar si la p\u00e1gina resultante es vulnerable\nif es_vulnerable(res):\nprint(\"[+] Vulnerabilidad SQL Injection detectada, link\", url)\nprint(\"[+] Formulario:\")\npprint(form_details)\nbreak   \n</code></pre> <ol> <li>Se ha detectado un SQLi en la misma URL, no es necesario proceder m\u00e1s all\u00e1 para extraer formularios y enviarlos</li> <li>Cualquier input del formulario que tiene alg\u00fan valor u oculto, s\u00f3lo para usarlo en el cuerpo de la petici\u00f3n</li> <li>Se junta (join) la URL con el <code>action</code> (la URL de la petici\u00f3n del formulario)</li> </ol> <p>Antes de extraer los formularios y enviarlos, la funci\u00f3n de arriba comprueba primero si hay vulnerabilidad en la misma URL. Esto lo hace simplemente a\u00f1adiendo una comilla <code>'</code> a la URL.</p> <p>Tras ello se utiliza la biblioteca <code>requests</code> para realizar la petici\u00f3n y se compreba si el contenido de la respuesta contiene los errores que estamos buscando.</p> <p>A continuaci\u00f3n, \"parseamos\" los formularios y hacemos \"submit\" de cada uno de los que hemos encontrado a\u00f1adiendo las comillas.</p> <p>As\u00ed pues, el <code>main</code> de nuestro script queda as\u00ed:</p> <pre><code>if __name__ == \"__main__\":\nimport sys\nurl = sys.argv[1]\n_______ ()\n</code></pre>"},{"location":"SQLi/#referencias","title":"Referencias","text":"<p>What is an SQLi?</p> <p>How to Build a SQL Injection Scanner in Python</p>"},{"location":"SSH_brute/","title":"Fuerza bruta en SSH","text":""},{"location":"SSH_brute/#introduccion","title":"Introducci\u00f3n","text":"<p>Un ataque de fuerza bruta es aquel que se basa en repetidos intentos de login utilizando m\u00faltiples combinanciones para comprometer un sistema que requeria autenticaci\u00f3n. Hay much\u00edsimas y muy buenas herramientas open source para realizar fuerza bruta al servicio SSH en Linux, como pueden ser Hydra, Metasploit, Patator o Medusa. </p> <p>A\u00fan as\u00ed, como nos encanta aprender, vamos a crear nuestro propio script para realizar un ataque de fuerza bruta a un servidor SSH en Python.</p> <p>En primer lugar, el m\u00f3dulo m\u00e1s importante que vamos a utilizar es paramiko, que nos proporciona una interfaz sencilla de cliente SSH.</p> <p>Para instalarlo, bien de forma global en nuestra m\u00e1quina, junto :</p> <pre><code>$ pip3 install paramiko colorama\n</code></pre> <p>Bien \u00fanicamente en nuestro entorno virtual:</p> <pre><code>(entorno-virtual)$ pipenv install paramiko colorama\n</code></pre> <p>En este caso instalamos tambi\u00e9n el m\u00f3dulo colorama que \u00fanicamente nos permitir\u00e1 imprimir en colores los textos por pantalla.</p>"},{"location":"SSH_brute/#importando-modulos-necesarios","title":"Importando m\u00f3dulos necesarios","text":"<p>Para nuestros prop\u00f3sitos vamos a necesitar los siguientes m\u00f3dulos:</p> <pre><code>import paramiko\nimport socket\nimport time\nfrom colorama import init, Fore\n</code></pre> <ul> <li>El m\u00f3dulo paramiko, entre otras otras cosas, nos permite realizar conexiones ssh a un servidor, mostrando en tiempo real el resultado de los comandos que se ejecuten en el mismo. </li> <li>El m\u00f3dulo socket nos permite crear conexiones de red de bajo nivel</li> <li>time, como su nombre indica, proporciona varias funciones relacionadas con el tiempo </li> </ul> <p>Definimos algunos de los colores que vamos a utilizar:</p> <pre><code>init() #(1)\nGREEN = Fore.GREEN\nRED   = Fore.RED\nRESET = Fore.RESET\nBLUE  = Fore.BLUE\n</code></pre> <ol> <li>Iniciamos <code>colorama</code></li> </ol> <p>Ahora construiremos una funci\u00f3n que, dado nombre de host, un usuario y una contrase\u00f1a, nos diga si la combinaci\u00f3n es correcta:</p> <pre><code>def is_ssh_open(_______, _______, _______):\n# initialize SSH client\nclient = paramiko.SSHClient()\n# add to know hosts\nclient.set_missing_host_key_policy(paramiko.AutoAddPolicy())\ntry:\nclient.connect(hostname=_______, username=_______, password=_______, timeout=3)\nexcept socket.timeout:\n# this is when host is unreachable\nprint(f\"{RED}[!] Host: {hostname} is unreachable, timed out.{RESET}\")\nreturn False\nexcept paramiko.AuthenticationException:\nprint(f\"[!] Invalid credentials for {username}:{password}\")\nreturn False\nexcept paramiko.SSHException:\nprint(f\"{BLUE}[*] Quota exceeded, retrying with delay...{RESET}\")\n# sleep for a minute\ntime.sleep(60)\nreturn is_ssh_open(hostname, username, password)\nelse:\n# connection was established successfully\nprint(f\"{GREEN}[+] Found combo:\\n\\tHOSTNAME: {hostname}\\n\\tUSERNAME: {username}\\n\\tPASSWORD: {password}{RESET}\")\nreturn True\n</code></pre> <p>Mucha informaci\u00f3n en el bloque de arriba, que pasamos a desgranar. En primer lugar inicializamos nuestro cliente SSH usando <code>paramiko.SSHClient()</code> que no es m\u00e1s que una representaci\u00f3n a alto nivel de una sesi\u00f3n con un servidor SSH.</p> <p>En segundo lugar, estalecemos la pol\u00edtica a usar cuando conectamos con servidores que no tengan una clave de host conocida. Usamos <code>paramiko.AutoAddPolicy()</code>, que es una pol\u00edtica para a\u00f1adir autom\u00e1ticamente el nombre de host y la nueva clave de host a nuestras claves locales. En rom\u00e1n palad\u00edn, es una forma de emular esta t\u00edpica acci\u00f3n:</p> <p></p> <p>Finalmente, intentamos conectarnos al servidor SSH y autenticarnos en \u00e9l usando el m\u00e9todos <code>client.connect()</code> con un timeout de 3 segundos. Este m\u00e9todo puede lanzar varias excepciones:</p> <ol> <li><code>socket.timeout</code> cuando el host es inalcanzable durante 3 segundos</li> <li><code>paramiko.AuthenticationException</code> cuando la combinaci\u00f3n usuario/contrase\u00f1a no es correcta</li> <li><code>paramiko.SSHException</code> cuando se han producido muchos intentos de login en un corto periodo de tiempo. Dicho de otro modo, el servidor detecta que es un intento de fuerza bruta, nos damos por enterados y esperaremos un minuto para volver a llamar a la funci\u00f3n de nuevo con los mismos par\u00e1metros.</li> </ol> <p>Si no se lanza ninguna de las excpeciones anteriores, entonces significa que se ha estalecido la conexi\u00f3n con \u00e9xito y las credenciales son correctas, por lo que devolveremos <code>True</code> en este caso.</p> <p>Puesto que estamos hablando de un script en l\u00ednea de comandos, debemos parsear los argumentos que se le pasan al mismo:</p> <p><pre><code>if __name__ == \"__main__\":\nimport argparse\nparser = argparse.ArgumentParser(description=\"SSH Bruteforce Python script.\")\nparser.add_argument(\"host\", help=\"Hostname or IP Address of SSH Server to bruteforce.\")\nparser.add_argument(\"-P\", \"--passlist\", help=\"File that contain password list in each line.\")\nparser.add_argument(\"-u\", \"--user\", help=\"Host username.\")\n# parseamos los argumentos que se nos han pasado\nargs = parser.parse_args()\nhost = args._______\npasslist = args._______\nuser = args._______\n# leer el fichero\npasslist = open(_______).read().splitlines()\n# fuerza bruta\nfor password in passlist:\nif is_ssh_open(host, user, password):\nglobal credenciales\n# Si la combinaci\u00f3n es v\u00e1lida, la guardamos en un archivo\ncredenciales = open(\"credentials.txt\", \"w\").write(f\"{user}@{host}:{password}\")\nbreak\ncredenciales.close()\n</code></pre> B\u00e1sicamente parseamos los argumentos para obtener el nombre de host, el nombre de usuario y el fichero con el listado de contrase\u00f1as sobre las que iteraremos. </p>"},{"location":"SSH_brute/#referencias","title":"Referencias","text":"<p>How to Change Text Color in Python</p> <p>socket \u2014 Comunicaci\u00f3n en red</p> <p>HOW TO - Programaci\u00f3n con sockets</p> <p>How to Brute-Force SSH Servers in Python</p>"},{"location":"beauty/","title":"Beautiful Soup","text":""},{"location":"beauty/#web-scraping","title":"Web scraping","text":"<p>Internet es una fuente de datos absolutamente masiva, datos a los que podemos acceder mediante el web scraping y Python.</p> <p>De hecho, el web scraping es a menudo la \u00fanica forma de acceder a los datos. Hay mucha informaci\u00f3n ah\u00ed fuera que no est\u00e1 disponible mediante c\u00f3modas exportaciones CSV o APIs f\u00e1ciles de conectar. Adem\u00e1s, los propios sitios web son a menudo valiosas fuentes de datos. Pensemos, por ejemplo, en el tipo de an\u00e1lisis que se podr\u00eda hacer si pudieramos descargar todos los mensajes de un foro web.</p> <p>Para acceder a este tipo de conjuntos de datos en la p\u00e1gina, tendremos que utilizar el web scraping.</p>"},{"location":"beauty/#fundamentos-del-web-scraping","title":"Fundamentos del web scraping","text":"<p>Algunos sitios web ofrecen conjuntos de datos que se pueden descargar en formato CSV, o que son accesibles a trav\u00e9s de una interfaz de programaci\u00f3n de aplicaciones (API). Pero muchos sitios web con datos \u00fatiles no ofrecen este tipo de opciones.</p> <p>Veamos, por ejemplo, el caso del sitio web del Servicio Meteorol\u00f3gico Nacional de EEUU. Contiene previsiones meteorol\u00f3gicas actualizadas para todos los lugares de Estados Unidos, pero esos datos meteorol\u00f3gicos no son accesibles en formato CSV ni a trav\u00e9s de la API. Hay que verlos en el propio sitio del NWS:</p> <p></p> <p>Si quisi\u00e9ramos analizar estos datos, o descargarlos para utilizarlos en alguna otra aplicaci\u00f3n, no querr\u00edamos copiar y pegar todo a mano. El \"web scraping\" es una t\u00e9cnica que nos permite utilizar la programaci\u00f3n para hacer el trabajo pesado. </p> <p>Vamos a escribir un c\u00f3digo que busque en el sitio del NWS, coja s\u00f3lo los datos con los que queremos trabajar y los proporcione en el formato que necesitamos.</p> <p>Cuando hacemos scraping de la web, escribimos un c\u00f3digo que env\u00eda una petici\u00f3n al servidor que aloja la p\u00e1gina que hemos especificado. El servidor devolver\u00e1 el c\u00f3digo fuente - HTML, principalmente - de la p\u00e1gina (o p\u00e1ginas) que hemos solicitado.</p> <p>Hasta aqu\u00ed, estamos haciendo esencialmente lo mismo que hace un navegador web: enviar una petici\u00f3n al servidor con una URL espec\u00edfica y pedirle que nos devuelva el c\u00f3digo de esa p\u00e1gina.</p> <p>Pero a diferencia de un navegador web, nuestro c\u00f3digo de web scraping no interpretar\u00e1 el c\u00f3digo fuente de la p\u00e1gina y la mostrar\u00e1 visualmente. En su lugar, escribiremos un c\u00f3digo personalizado que filtrar\u00e1 dicho c\u00f3digo fuente en busca de los elementos concretos que hayamos especificado y extraer\u00e1 el contenido que le hayamos indicado.</p> <p>Por ejemplo, si quisi\u00e9ramos obtener todos los datos del interior de una tabla que se muestra en una p\u00e1gina web, nuestro c\u00f3digo se escribir\u00eda para seguir estos pasos en secuencia:</p> <ul> <li>Solicitar al servidor el contenido (c\u00f3digo fuente) de una URL espec\u00edfica</li> <li>Descargar el contenido devuelto</li> <li>Identificar los elementos de la p\u00e1gina que forman parte de la tabla que queremos</li> <li>Extraer y (si es necesario) reformatear esos elementos en un conjunto de datos que podamos analizar o utilizar de la forma que queramos.</li> </ul> <p>Si todo esto suena muy complicado, no hay de qu\u00e9 preocuparse, Python y Beautiful Soup tienen funciones integradas dise\u00f1adas para que esto sea relativamente sencillo.</p> <p>Una cosa que es importante tener en cuenta: desde la perspectiva de un servidor, solicitar una p\u00e1gina a trav\u00e9s de web scraping es lo mismo que cargarla en un navegador web. Cuando usamos c\u00f3digo para enviar estas peticiones, podemos estar \"cargando\" p\u00e1ginas mucho m\u00e1s r\u00e1pido que un usuario normal, y por tanto consumiendo r\u00e1pidamente los recursos del servidor del propietario del sitio web.</p>"},{"location":"beauty/#es-legal-el-web-scraping","title":"\u00bfEs legal el Web Scraping?","text":"<p>Desafortunadamente, no hay una respuesta clara en este aspecto. Algunos sitios web permiten expl\u00edcitamente el web scraping mientras que otros lo proh\u00edben expl\u00edcitamente. Muchos sitios web no ofrecen ninguna orientaci\u00f3n clara en un sentido u otro.</p> <p>Antes de hacer scraping de cualquier sitio web, debemos buscar una p\u00e1gina de t\u00e9rminos y condiciones para ver si hay normas expl\u00edcitas sobre el scraping. Si las hay, debemos cumplirlas. Si no las hay, se trata m\u00e1s bien de una cuesti\u00f3n de criterio.</p> <p>Sin embargo, hay que recordar que el scraping consume recursos del servidor del sitio web anfitri\u00f3n. Si s\u00f3lo hacemos scraping de una p\u00e1gina una vez, eso no va a causar un problema. Pero si nuestro c\u00f3digo est\u00e1 haciendo scraping de 1.000 p\u00e1ginas una vez cada diez minutos, eso r\u00e1pidamente podr\u00eda convertirse en un problema de costes para el propietario del sitio web.</p> <p></p> <p>Por lo tanto, adem\u00e1s de seguir todas y cada una de las reglas expl\u00edcitas sobre el web scraping publicadas en el sitio, tambi\u00e9n es una buena idea seguir una serie de buenas pr\u00e1cticas recomendadas:</p> <ul> <li>Nunca hacer scraping con m\u00e1s frecuencia de la necesaria.</li> <li>Considerar la posibilidad de almacenar en cach\u00e9 el contenido que se obtenga procedente el scraping para que s\u00f3lo se descargue una vez.</li> <li>Incorpora pausas en tu c\u00f3digo utilizando funciones como <code>time.sleep()</code> para no abrumar a los servidores con demasiadas peticiones demasiado r\u00e1pido.</li> </ul> <p>En el ejemplo que nos ocupa, los datos del NWS son de dominio p\u00fablico y sus condiciones no proh\u00edben el scraping de la web, por lo que estamos en condiciones de proceder.</p>"},{"location":"beauty/#componentes-de-una-pagina-web","title":"Componentes de una p\u00e1gina web","text":"<p>Antes de empezar a escribir c\u00f3digo, necesitamos entender un poco acerca de la estructura de una p\u00e1gina web ya que es lo que utilizaremos los datos deseados cuando hagamos scraping.</p> <p>Cuando visitamos un sitio web, nuesro navegador hace una petici\u00f3n a un servidor web. Esta petici\u00f3n ser\u00e1 de tipo <code>GET</code> puesto que estamos obteniendo ficheros del servidor. El servidor env\u00eda de vuelta al navegador los ficheros que le indican c\u00f3mo tiene que renderizar la p\u00e1gina para el usuario. Estos archivos t\u00edpicamente incluir\u00e1n:</p> <ul> <li> <p>HTML: el contenido principal de la p\u00e1gina</p> </li> <li> <p>CSS: usado para a\u00f1adir estilos a las p\u00e1ginas y mejorar su aspecto</p> </li> <li> <p>JS: Javascript a\u00f1ade interactividad a la p\u00e1gina web.</p> </li> <li> <p>Im\u00e1genes: Para ser mostradas en el sitio</p> </li> </ul> <p>Como hemos dicho ya, tras recibir los archivos, el navegador renderiza la p\u00e1gina y la muestra.</p> <p>A la hora de llevar a cabo el scrapig, estamos interesados en el contenido principal de la web as\u00ed que miraremos principalmente el c\u00f3digo HTML.</p>"},{"location":"beauty/#html","title":"HTML","text":"<p>HTML es el lenguaje en el que est\u00e1n creados los sitios web. No se tata de un lenguaje de programaci\u00f3n como pueda serlo Python. Es un lenguaje de marcado que le dice al navegador como mostrar contenido.</p> <p>HTML tiene varias que son similiares a lo que se pudiera hacer con un procesador de textos (negrita, p\u00e1rrafos...).</p> <p>Hagamos un rapid\u00edsimo repaso de HTML.</p> <p>HTML est\u00e1 formado por elementos llamados tags o etiquetas. El m\u00e1s b\u00e1sico es <code>&lt;html&gt;</code> y es el que le indica al navegador que todo lo que vaya dentro de \u00e9l es HTML. As\u00ed pues, el documento HTML m\u00e1s simple ser\u00eda:</p> <pre><code>&lt;html&gt;\n&lt;/html&gt;\n</code></pre> <p>No hemos a\u00f1adido contenido a nuestra p\u00e1gina todav\u00eda as\u00ed que este documento HTML no mostrar\u00eda nada en un navegador. Podemos poner m\u00e1s etiquetas dentro de las etiquetas <code>html</code>:</p> <pre><code>&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>El contenido principal del sitio web lo podremos encontrar dnetro de las etiquetas <code>body</code>. La etiqueta <code>head</code> contiene informaci\u00f3n acerca dle t\u00edtulo de la p\u00e1gina as\u00ed como otro tipo de informaci\u00f3n no \u00fatil para el web scraping.</p> <p>A\u00f1adamos ahora un p\u00e1rrafo dentro del body con su correspondiente etiqueta <code>p</code>:</p> <pre><code>&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;p&gt;\nPrimer p\u00e1rrafo\n&lt;/p&gt;\n&lt;p&gt;\nSegundo p\u00e1rrafo\n&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Podemos adem\u00e1s a\u00f1adir propiedades a las etiquetas HML que cambien su comportamiento. A\u00f1adamos ahora hiperenlaces con la etiqueta <code>a</code>:</p> <pre><code>&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;p&gt;\nPrimer p\u00e1rrafo\n&lt;a href=\"https://www.dataquest.io\"&gt;Learn Data Science Online&lt;/a&gt;\n&lt;/p&gt;\n&lt;p&gt;\nSegundo p\u00e1rrafo\n&lt;a href=\"https://www.python.org\"&gt;Python&lt;/a&gt; &lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Que se ver\u00e1 as\u00ed:</p> <p></p> <p>En el ejemplo anterio la etiqueta <code>a</code> indica que se trata de un link y la propiedad <code>href</code> determina a donde apunta ese link.</p> <p>Otras etiquetas comunes son:</p> <ul> <li>div: indica una divisi\u00f3n o \u00e1rea de la p\u00e1gina</li> <li>b: texto en negrita</li> <li>i: texto en cursiva</li> <li>table: crea una tabla</li> <li>form: crea un formulario</li> </ul> <p>Aqu\u00ed pod\u00e9is encontrar la lista completa de tags o etiquetas.</p> <p>Para acabar con el apartado dedicado a HTML, debemos hablar de las propiedades <code>class</code> y <code>id</code>. Estas propiedade especiales proporciona nombres a los elementos HTML, haciendo as\u00ed m\u00e1s f\u00e1cil interactuar con ellos a la hora de hacer scraping.</p> <p>Un elemento puede tener multiples clases y una clase puede ser compartida entre elementos. Cada elemento s\u00f3lo puede tener un \u00fanico id y un id s\u00f3lo puede usarse una vez por p\u00e1gina.  </p> <p>Estos <code>class</code> y <code>id</code> son opcinoales y no todos los elementos los tendr\u00e1n. Sobre el ejemplo anterior:</p> <pre><code>&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;p class=\"bold-paragraph\"&gt;\nPrimer p\u00e1rrafo\n&lt;a href=\"https://www.dataquest.io\" id=\"learn-link\"&gt;Learn Data Science Online&lt;/a&gt;\n&lt;/p&gt;\n&lt;p class=\"bold-paragraph extra-large\"&gt;\nSegundo p\u00e1rrafo\n&lt;a href=\"https://www.python.org\" class=\"extra-large\"&gt;Python&lt;/a&gt;\n&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Estas propiedades no modifican la forma en que se ve la p\u00e1gina en el navegador.</p>"},{"location":"beauty/#parseando-paginas-con-beatifulsoup","title":"Parseando p\u00e1ginas con BeatifulSoup","text":"<p>El parsing no es m\u00e1s que un an\u00e1lisis sint\u00e1ctico, como pod\u00e9is leer aqu\u00ed</p> <p>Supongamos que descargamos la siguiente p\u00e1gina usando la biblioteca Requests que ya hemos visto:</p> <pre><code>import requests\npage = requests.get(\"https://dataquestio.github.io/web-scraping-pages/simple.html\")\npage\n</code></pre> <p>Podemos utilizar la biblioteca BeautifulSoup para parsear este documento y extraer el texto de la etiqueta <code>p</code>.</p> <p>Lo primero que deberemos hacer, como siempre, es instalar BeautifulSoup. Podemos hacerlo en nuestro entorno virtual:</p> <p>O de forma general en nuestra m\u00e1quina:</p> <p><pre><code>pipenv shell\npipenv install beautifulsoup4\n</code></pre> Ahora, en el entorno interactivo de python, podemos proceder:</p> <p></p> <p>Lo que hemos hecho ha sido importar la biblioteca y crear una instancia de la clase BeautifulSoup para parsear nuestro documento. Tras ello, hemos mostrado por pantall el contenido de la p\u00e1gina de una forma un poco m\u00e1s bonita utilizando el m\u00e9todo <code>prettify</code> del objeto <code>BeautifulSoup</code>.</p> <p>Este \u00faltimo paso no es estrictamente necesario aunque a veces pueda ayudarnos para que sea m\u00e1s f\u00e1cil entender la estructura de las etiquetas de la p\u00e1gina y el anidado entre ellas.</p> <p>Con la propiedad <code>children</code> de <code>soup</code> podemos seleccionar los elementos del nivel m\u00e1s alto. Estos elementos se devuelven en forma de lista, por lo que necesitaremos la funci\u00f3n <code>list</code>:</p> <pre><code>list(soup.children)\n</code></pre> <p>El resultado del comando de arriba nos indicar\u00e1 que hay dos etiquetas de nivel superior, la etiqueta inicial <code>&lt;!DOCTYPE html&gt;</code> y la etiqueta <code>&lt;html&gt;</code>. Adem\u00e1s aparece un car\u00e1cter de nueva l\u00ednea <code>\\n</code> en la lista tambi\u00e9n. </p> <p>Para saber qu\u00e9 tipo de dato es cada elemento, podemos iterar sobre la lista:</p> <pre><code>[type(item) for item in list(soup.children)]\n</code></pre> <p>Veremos de esta forma que que los elementos de la lista son objetos de BeautifulSoup:</p> <ul> <li> <p>El primero es un objeto <code>Doctype</code>, que contiene informaci\u00f3n sobre el tipo de documento</p> </li> <li> <p>El segundo es del tipo <code>NavegableString</code>, que indica que se ha encontrado texto el documento HTML.</p> </li> <li> <p>El elemento final es un <code>Tag</code>, que contiene otros tags anidados.</p> </li> </ul> <p>El tipo de objeto m\u00e1s importante y con el que lidiaremos m\u00e1s a menudo es el objeto <code>Tag</code>.</p> <p>El objeto Tag nos permite navegar a trav\u00e9s de un documento HTML y extraer otros tags o textos. </p> <p>Aqu\u00ed una lista con los tipos de objetos de BeatifulSoup.</p> <p>Podemos seleccionar ahora el tag html y sus hijos seleccionando el tercer elemnto de la lista:</p> <pre><code>html = list(soup.children)[2]\n</code></pre> <p>Cada elemento devuelto por la porpiedad <code>children</code> es tambi\u00e9n un objeto BeautifulSoup, as\u00ed que podremos seguir invocando el m\u00e9todo <code>children</code> sobre <code>html</code></p> <pre><code>list(html.children)\n</code></pre> <p>Y podremos seguir iterando sobre los tags anidados hasta aislar el tag <code>p</code> que es el que nos interesa</p> <p><pre><code>body = list(html.children)[3]\nlist(body.children)\np = list(body.children)[1]\n</code></pre> _ Y una vez aislado, usamos el m\u00e9todo <code>get_text</code> para extraer todo el texto que deseamos:</p> <pre><code>p.get_text()\n</code></pre>"},{"location":"beauty/#encontrar-todas-las-instancias-de-una-etiqueta-o-tag-a-la-vez","title":"Encontrar todas las instancias de una etiqueta o tag a la vez","text":"<p>El proceso que hemos seguido arriba es \u00fatil pero tedioso y poco eficiente. Es por ello, que si quisi\u00e9ramos extraer todas las instancias de un tag dentro de una p\u00e1gina, podemos utilizar el m\u00e9todo <code>find_all</code>:</p> <pre><code>soup = BeautifulSoup(page.content, 'html.parser')\nsoup.find_all('p')\n</code></pre> <p>Este m\u00e9todo devuelve una lista, as\u00ed que tendremos que iterar sobre ella o usar \u00edndices para extraer el texto:</p> <pre><code>soup.find_all('p')[0].get_text()\n</code></pre> <p>Para encontrar la primera instancia que aparece en la p\u00e1gina de un determinado tag, usaremos el m\u00e9todo <code>find</code>, que devuelve un \u00fanico objeto BeautifulSoup:</p> <pre><code>soup.find('p')\n</code></pre>"},{"location":"beauty/#buscando-etiquetas-usando-class-y-id","title":"Buscando etiquetas usando \"class\" y \"id\"","text":"<p>Estos dos elementos, introducidos con anteriorirdad, se usan en CSS para determinar a qu\u00e9 elementos HTML se est\u00e1n aplicando ciertos estilos. Pero cuando estamos haciendo scraping tambi\u00e9n podemos usarlos para escpeificar los elementos que queremos scrapear.</p> <p>Para ilustrar esta secci\u00f3n, vamos a trabajar con la siguiente p\u00e1gina:</p> <pre><code>&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;A simple example page&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div&gt;\n&lt;p class=\"inner-text first-item\" id=\"first\"&gt;\n                First paragraph.\n            &lt;/p&gt;\n&lt;p class=\"inner-text\"&gt;\n                Second paragraph.\n            &lt;/p&gt;\n&lt;/div&gt;\n&lt;p class=\"outer-text first-item\" id=\"second\"&gt;\n&lt;b&gt;\n                First outer paragraph.\n                &lt;/b&gt;\n&lt;/p&gt;\n&lt;p class=\"outer-text\"&gt;\n&lt;b&gt;\n                Second outer paragraph.\n                &lt;/b&gt;\n&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Que podemos encontrar aqu\u00ed.</p> <p>Seguimos el mismo modus operandi, descargamos la p\u00e1gina y creamos un objeto BeautifulSoup:</p> <pre><code>page = requests.get(\"https://dataquestio.github.io/web-scraping-pages/ids_and_classes.html\")\nsoup = BeautifulSoup(page.content, 'html.parser')\nsoup\n</code></pre> <p>Ahora, para encontrar todos los elementos con el tag <code>p</code> con un class igual a <code>outer-text</code>:</p> <pre><code>soup.find_all('p', class_='outer-text')\n</code></pre> <p>O simplemente cualquier tag con ese class:</p> <pre><code>soup.find_all(class_=\"outer-text\")\n</code></pre> <p>O buscar tambi\u00e9n por id:</p> <pre><code>soup.find_all(id=\"first\")\n</code></pre>"},{"location":"beauty/#usando-selectores-css","title":"Usando selectores CSS","text":"<p>Tambi\u00e9n podemos buscar elementos usando los selectores CSS. Mediante estos selectores el lenguaje CSS permite a los desarrolladores especificar las etiquetas HTML a las que aplicar estilos. Algunos ejemplos:</p> <ul> <li><code>p a</code>: encuentra todos los tags <code>a</code> dentro de un tag <code>p</code></li> <li><code>body p a</code>: encuentra todos los tags <code>a</code> dentro de un tag <code>p</code> dentro de un tag <code>body</code></li> <li><code>html body</code>: encuentra todos los tags <code>body</code> dentro deun tag <code>html</code></li> <li><code>p.outer-text</code>: encuentra todos los tags <code>p</code> con la class <code>outer-text</code></li> <li><code>p#first</code>: encuentra todos los tags <code>p</code> con un id <code>first</code></li> <li><code>body p.outer-text</code>: encuentra todos los tags <code>p</code> con la class <code>outer-text</code> dentro de un tag <code>body</code></li> </ul> <p>BeautifulSoup soporta la b\u00fasqueda en una p\u00e1gina usando selectores CSS usando el m\u00e9todo <code>select</code>. Podemos usar estos selectores para encontrar todos los tags <code>p</code> de nuestra p\u00e1gina que est\u00e9 dentro de un <code>div</code> tal que as\u00ed:</p> <pre><code>soup.select(\"div p\")\n</code></pre> <p>Note</p> <p>El m\u00e9todo <code>select</code> de arriba devuelve una lista de objetos BeautifulSoup, igual que <code>find</code> y <code>find_all</code></p>"},{"location":"beauty/#ejemplo-practico-scraping-de-datos-meteorologicos","title":"Ejemplo pr\u00e1ctico: Scraping de datos meteorol\u00f3gicos","text":"<p>Para este ejemplo se utilizar\u00e1 la p\u00e1gina de informaci\u00f3n del tiempo de San Francisco</p> <p></p> <p>Como vemos en la imagen, la p\u00e1gina contiene informaci\u00f3n ampliada de la previsi\u00f3n meteorol\u00f3gica para la semana que viene, incluyendo cosas como la temperatura o una breve descripci\u00f3n de las condiciones.</p>"},{"location":"beauty/#explorando-la-estructura-de-la-pagina-con-las-herramientas-de-desarrollador","title":"Explorando la estructura de la p\u00e1gina con las herramientas de desarrollador","text":"<p>Para acceder a las herramientas de desarrollador de nuestro navegador podemos apretar simplemente F12 o podemos encontrarlas en Herramientas &gt; Herramientas del navegador &gt; Herramientas para desarrolladores web (en Firefox, en otros navegadores ser\u00e1 similar).</p> <p>Si os coloc\u00e1is sobre la pesta\u00f1a Inspector, se os mostrar\u00e1n todas las etiquetas/tags de la p\u00e1gina y podr\u00e9is navegar por ellas:</p> <p></p> <p>Si hacemos click derecho en la p\u00e1gina, cerca de donde pone Extended forecast y le decimos Inspeccionar, se nos abrir\u00e1 el tag donde est\u00e1n contenidos esos elementos:</p> <p></p> <p>En la pesta\u00f1a de Elements tambi\u00e9n podemos ir navegando por los distintos elementos para encontrar el que contiene todo el texto que corresponde con la informaci\u00f3n del tiempo ampliada (extended forecasts). En este caso, como v\u00e9is en la imagen de arriba, se trata de un <code>div</code> con el id <code>seven-day-forecast</code>.</p> <p>Si trasteamos un poco en la consola, podremos explorar el diva y descubiremos que cada elemento del tiempo (Tonight, Thursday, Thursday night...) est\u00e1 contenido en un <code>div</code> con la class <code>tombstone-container</code>.</p>"},{"location":"beauty/#empecemos-con-el-scraping","title":"\u00a1Empecemos con el scraping!","text":"<p>Ya tenemos todo lo que ncesitamos para descargarnos la p\u00e1gina y empezar a parsear como si no hubiera un ma\u00f1ana. Lo que haremos, ser\u00e1:</p> <ol> <li>Descargar la p\u00e1gina web que contiene la previsi\u00f3n del tiempo</li> <li>Crear una clase BeautifulSoup para parsear la p\u00e1gina</li> <li>Encontrar el <code>div</code> con id <code>seven-day-forecast</code> y asignarlo a la variable <code>seven_day</code></li> <li>Dentro de <code>seven_day</code> deberemos encontrar cada elemento indiivdual de la previsi\u00f3n del tiempo</li> <li>Extraer e imprimir el primero de estos elementos</li> </ol> <p>Esto, traducido a c\u00f3digo Python, ser\u00eda:</p> <pre><code>pagina = requests.get(\"https://forecast.weather.gov/MapClick.php?lat=37.7772&amp;lon=-122.4168\")\nsoup = BeautifulSoup(pagina.content, 'html.parser')\nseven_day = soup.find(id=\"seven-day-forecast\")\nelementos_clima = seven_day.find_all(class_=\"tombstone-container\")\ntonight = elementos_clima[0]\nprint(tonight.prettify())\n</code></pre>"},{"location":"beauty/#extraer-informacion-concreta-de-la-pagina","title":"Extraer informaci\u00f3n concreta de la p\u00e1gina","text":"<p>Vemos que dentro del elemento <code>tonight</code> est\u00e1 toda la informaci\u00f3n que deseamos. Hay cuatro piezas de informaci\u00f3n que podemos extraer:</p> <ul> <li>El nombre del elemento, en este caso <code>Tonight</code></li> <li>La descripci\u00f3n de las condiciones, almacenadas en la propiedad <code>title</code> de <code>img</code></li> <li>Una breve descripci\u00f3n de las condiciones, en este caso <code>Mostly Clear</code></li> <li>La m\u00ednima de temperatura, en este caso 58\u00baF</li> </ul> <p>Para extraer pues la informaci\u00f3n m\u00e1s relevante, siguiendo con el ejemplo anterior, podemos hacer:</p> <p><pre><code>periodo = tonight.find(class_=\"period-name\").get_text()\ndesc_corta = tonight.find(class_=\"short-desc\").get_text()\ntemp = tonight.find(class_=\"temp\").get_text()\nprint(periodo)\nprint(desc_corta)\nprint(temp)\n</code></pre> Ahora, podemos extraer el atributo <code>title</code> de la etiqueta <code>img</code>. Para hacer esto, trataremos al objeto BeautifulSoup como un diccionario y le pasaremos el atributo que queremos como una clave:</p> <pre><code>img = tonight.find(\"img\")\ndesc = img['title']\nprint(desc)\n</code></pre>"},{"location":"beauty/#extraer-toda-la-informacion-de-la-pagina","title":"Extraer toda la informaci\u00f3n de la p\u00e1gina","text":"<p>Ahora que ya sabemos como extraer piezas de informaci\u00f3n de forma individual, podemos combinar nuestros vastos conocimientos junto con los selectores CSS y las list comprehensions para extraerlo todo a la vez.</p> <p>Los pasos a seguir para el ejemplo que nos ocupa, son:</p> <ul> <li>Seleccionar todos los elementos con la class <code>period-name</code> dentro de un elemento con la class <code>tombstone-container</code> que tengamos en la variable <code>seven_day</code></li> <li>Usar una list comprehension para invocar al m\u00e9todo <code>get_text</code> en cada objeto BeautifulSoup.</li> </ul> <pre><code>tags_periodo = seven_day.select(\".tombstone-container .period-name\")\nperiodos = [pt.get_text() for pt in tags_periodo]\nperiodos\n</code></pre> <p>A partir de aqu\u00ed ya podr\u00edamos tratar la informaci\u00f3n extra\u00edda con bibliotecas como Pandas, convirti\u00e9ndola en diccionarios y tablas.</p> <p>Sin embargo, a nosotros por lo general s\u00f3lo nos interesar\u00e1 identificar y manipular campos de formularios con el fin de explotar diferentes fallos como puedan ser SQLi, enumeraci\u00f3n de usuarios o fuerza bruta entre otros.</p>"},{"location":"beauty/#referencias","title":"Referencias","text":"<p>Web Scraping with Python Using Beautiful Soup</p>"},{"location":"bibliografia/","title":"Bibliograf\u00eda","text":"<p>Python para todos</p> <p>C\u00f3mo pensar como un inform\u00e1tico</p> <p>Python crash course</p> <p>Curso Python de la NSA</p> <p>Inmersi\u00f3n en Python3</p> <p>Aprende Python de cero a experto</p> <p>Learning Python</p>"},{"location":"condicionales/","title":"Estructuras de control","text":""},{"location":"condicionales/#condicionales","title":"Condicionales","text":"<p>Las estructuras de control se utilizan para ejecutar bloques de c\u00f3digo en funci\u00f3n de condiciones.</p>"},{"location":"condicionales/#sentencia-if-else","title":"Sentencia IF - ELSE","text":"<p>Se eval\u00faa la condici\u00f3n especificada en la sentencia <code>if</code> y en caso de cumplirse se ejecutar\u00e1 el bloque de c\u00f3digo indentado (tabulado). En caso de que el resultado de la condici\u00f3n sea <code>False</code>, el bloque especificado no se ejecutar\u00e1:</p> <pre><code>numero = 5\nif numero &gt; 1:\n# Se ejecutar\u00e1 cuando la condici\u00f3n sea True\nprint(\"Es mayor que uno\")\n</code></pre> <p>Las condiciones pueden tener mayor complejidad:</p> <pre><code>edad = 16\naltura = 175\nif (edad &gt; 14 and altura &gt; 160):\nprint(\"Puede montarse en la monta\u00f1a rusa\")\n</code></pre> <p>Mediante la palabra reservada <code>else</code> es posible especificar un bloque de c\u00f3digo que se ejecute en caso de que la condici\u00f3n no se cumpla:</p> <pre><code>numero = 2\nif numero &gt; 10:\n# Se ejecutar\u00e1 cuando la condici\u00f3n sea True\nprint(\"Es mayor que diez\")\nelse:\n# Se ejecutar\u00e1 cuando la condici\u00f3n sera False\nprint(\"Es menor o igual que diez\")\n</code></pre> <p>Tambi\u00e9n podemos comprobar m\u00e1s condiciones mediante la expresi\u00f3n <code>elif</code>. En este caso, se seguir\u00e1n comprobando todas las condiciones <code>elif</code> hasta que una de ellas se cumpla. En caso contrario, se ejecutar\u00e1 el bloque de c\u00f3digo dentro de <code>else</code> (si lo hubiera).</p> <pre><code>numero = 5\nif numero &lt; 3:\nprint(\"Es menor que 3\")\nelif numero &lt; 6:\nprint(\"El n\u00famero est\u00e1 entre el 3 y el 5\")\nelse:\nprint(\"Es mayor o igual a 6\")\n</code></pre> <p>Tal y como muestra el siguiente c\u00f3digo de ejemplo, Python no tiene limitaciones para anidar distintos bloques de <code>IF</code>s.</p> <pre><code>numero = 2\nif numero &gt;= 0:\nif numero == 0:\nprint(\"El valor es 0\")\nelse:\nprint(\"Es un n\u00famero positivo\")\nelse:\nprint(\"Es un n\u00famero negativo\")\n</code></pre>"},{"location":"condicionales/#bucles","title":"Bucles","text":"<p>Los bucles permiten ejecutar un bloque de c\u00f3digo tantas veces como queramos. </p>"},{"location":"condicionales/#sentencia-while","title":"Sentencia WHILE","text":"<p>La sentencia <code>while</code> permite ejecutar un bloque de c\u00f3digo mientras la expresi\u00f3n que definamos se cumpla (es decir, devuelva <code>True</code>). Python interpretar\u00e1 como <code>True</code> cualquier valor distinto a <code>0</code> o <code>None</code>.</p> <pre><code>contador = 0\nwhile(contador &lt; 5):\n# Se ejecutar\u00e1 mientras la variable contador sea menor a 5.\ncontador = contador+1\nprint(\"Iteraci\u00f3n n\u00famero\",contador)\nprint (\"\u00a1Fin!\")\n</code></pre> <p>Para detener una ejecuci\u00f3n de forma voluntaria se utiliza la sentencia <code>break</code>:</p> <pre><code>contador = 0\nwhile(contador &lt; 5):\ncontador = contador+1\nprint(\"Iteraci\u00f3n n\u00famero\",contador)\nif contador == 3:\nbreak\nprint (\"\u00a1Fin!\")\n</code></pre> <p>Tambi\u00e9n es posible saltar \u00fanicamente la iteraci\u00f3n actual mediante la sentencia <code>continue</code>:</p> <pre><code>contador = 0\nwhile(contador &lt; 5):\ncontador = contador+1\nif contador == 3:\ncontinue\nprint(\"Iteraci\u00f3n n\u00famero {}\".format(contador))\nprint (\"\u00a1Fin!\")\n</code></pre> <p>La salida del programa anterior ser\u00e1 la siguiente: <pre><code>    Iteraci\u00f3n n\u00famero 1\n    Iteraci\u00f3n n\u00famero 2\n    Iteraci\u00f3n n\u00famero 4\n    Iteraci\u00f3n n\u00famero 5\n    Bucle while finalizado\n</code></pre></p> <p>Otros lenguajes de programaci\u00f3n ofrecen otra estructura similar conocida como <code>DO - WHILE</code>. No es el caso de Python, por lo que habr\u00eda que emular dicho comportamiento mediante nuestro c\u00f3digo.</p>"},{"location":"condicionales/#bucle-while-con-else","title":"Bucle WHILE con ELSE","text":"<p>La expresi\u00f3n <code>else</code> puede utilizarse tambi\u00e9n tras un bloque <code>while</code>. De este forma podemos definir un bloque de c\u00f3digo que se ejecutar\u00e1 una vez finalizado el bloque <code>while</code> (es decir, cuando la condici\u00f3n se eval\u00fae <code>False</code> y no se haya finalizado mediante un <code>break</code>):</p> <pre><code>count = 0\nwhile(count &lt; 5):\ncount = count+1\nprint(\"Iteraci\u00f3n n\u00famero {}\".format(count))\nelse:\nprint(\"Bucle while finalizado\")\n</code></pre>"},{"location":"condicionales/#sentencia-for","title":"Sentencia FOR","text":"<p>A diferencia de otros lenguajes de programaci\u00f3n, en Python la sentencia FOR itera \u00fanicamente por secuencias (listas, tuplas, cadenas de caracteres,...).</p> <pre><code>alumnos = [\"Ane\", \"Mikel\", \"Unai\", \"Lorea\"]\nfor alumno in alumnos:\nprint(alumno)\n</code></pre> <p>Tambi\u00e9n es posible utilizarlo para recorrer un string:</p> <pre><code>frase = \"Aprendiendo Python\"\nfor c in frase:\nprint(c)\n</code></pre> <p>Para detener una ejecuci\u00f3n se utiliza la sentencia <code>break</code>:</p> <pre><code>numeros = [4,8,2,7,1,9,3,5]\ntotal = 0\nfor n in numeros:\ntotal += n\nif total &gt; 10:\nbreak\n</code></pre> <p>Al igual que en otras estructuras de repetici\u00f3n, tambi\u00e9n es posible saltar \u00fanicamente la iteraci\u00f3n actual mediante la sentencia <code>continue</code>:</p> <pre><code>numeros = [4,8,2,7,1,9,3,5]\ntotal = 0\n# solo sumar los n\u00fameros impares\nfor num in numeros:\nif num % 2 == 0:\nprint(\"Numero par, no lo sumamos\")\ncontinue\ntotal += n\n</code></pre>"},{"location":"condicionales/#bucle-for-con-else","title":"Bucle FOR con ELSE","text":"<p>Python permite definir un bloque de c\u00f3digo que se ejecutar\u00e1 una vez finalice la iteraci\u00f3n por todos los elementos de una lista. Es importante mencionar que no se ejecutar\u00e1 si se ha finalizado mediante <code>break</code>.</p> <pre><code>alumnos = [\"Ane\", \"Mikel\", \"Unai\", \"Lorea\"]\nfor alumno in alumnos:\nprint(alumno)\nelse:\nprint(\"No quedan m\u00e1s alumnos.\")\n</code></pre>"},{"location":"condicionales/#la-funcion-range","title":"La funci\u00f3n range()","text":"<p>La funci\u00f3n <code>range([start,]  stop  [,  step])</code> devuelve una secuencia de n\u00fameros. Es por ello que se utiliza de forma frecuente para iterar:</p> <pre><code>for i in range(3):\nprint(i)\n# 0\n# 1\n# 2\n</code></pre> <p>Tambi\u00e9n podemos indicar el inicio, fin y step:</p> <pre><code>print(\"N\u00fameros del 5 al 10\") \nfor i in range(5,  10): \nprint(i,  end=', ')\n# 5,  6,  7,  8,  9,\nprint(\"N\u00fameros impares del 1 al 10\")\nfor i in range(1,  10,  2):\nprint(i,  end=', ')\n# 1,  3,  5,  7,  9,\n</code></pre> <p>Para iterar por una lista utilizando el \u00edndice, basta con combinarlo con la funci\u00f3n <code>len()</code>:</p> <pre><code>    alumnos = [\"Ane\", \"Mikel\", \"Unai\", \"Lorea\"]\nfor i in range(len(alumnos)):\nprint(alumnos[i])\n</code></pre>"},{"location":"condicionales/#captura-de-excepciones-usando-try-y-except","title":"Captura de excepciones usando try y except","text":"<p>Imaginemos un script donde utilicemos las funciones <code>input</code> e <code>int</code> para leer y analizar un n\u00famero entero introducido por el usuario. Resulta poco seguro realizar esta acci\u00f3n de esta forma:</p> <pre><code>&gt;&gt;&gt; velocidad = input(prompt)\n\u00bfCual.... es la velocidad de vuelo de una golondrina sin carga?\n\u00bfTe refieres a una golondrina africana o a una europea?\n&gt;&gt;&gt; int(velocidad)\nValueError: invalid literal for int() with base 10:\n&gt;&gt;&gt;\n</code></pre> <p>Cuando estamos trabajando con el int\u00e9rprete de Python, tras el error simplemente nos aparece de nuevo el prompt, as\u00ed que pensamos \u201c\u00a1epa, me he equivocado!\u201d, y continuamos con la siguiente sentencia.</p> <p>Sin embargo, si se escribe ese c\u00f3digo en un script de Python y se produce el error, el script se detendr\u00e1 inmediatamente, y mostrar\u00e1 un \u201ctraceback\u201d. No ejecutar\u00e1 la siguiente sentencia.</p> <p>He aqu\u00ed un programa de ejemplo para convertir una temperatura desde grados Fahrenheit a grados Celsius 1:</p> <pre><code>ent = input('Introduzca la Temperatura Fahrenheit:')\nfahr = float(ent)\ncel = (fahr - 32.0) * 5.0 / 9.0\nprint(cel)\n</code></pre> <p>Si ejecutamos este c\u00f3digo y le damos una entrada no v\u00e1lida, simplemente fallar\u00e1 con un mensaje de error bastante antip\u00e1tico:</p> <pre><code>python fahren.py\nIntroduzca la Temperatura Fahrenheit:72\n22.2222222222\npython fahren.py\nIntroduzca la Temperatura Fahrenheit:fred\nTraceback (most recent call last):\nFile \"fahren.py\", line 2, in &lt;module&gt;\nfahr = float(ent)\nValueError: invalid literal for float(): fred\n</code></pre> <p>Existen estructuras de ejecuci\u00f3n condicional dentro de Python para manejar este tipo de errores esperados e inesperados, llamadas <code>try/except</code>.</p> <p>La idea de try y except es que si se sabe que cierta secuencia de instrucciones puede generar un problema, sea posible a\u00f1adir ciertas sentencias para que sean ejecutadas en caso de error. Estas sentencias extras (el bloque except) ser\u00e1n ignoradas si no se produce ning\u00fan error.</p> <p>Pod\u00e9is pensar en la caracter\u00edstica try y except de Python como una \u201cp\u00f3liza de seguros\u201d en una secuencia de sentencias.</p> <p>Se puede reescribir nuestro conversor de temperaturas de esta forma:</p> <pre><code>ent = input('Introduzca la Temperatura Fahrenheit:')\ntry:\nfahr = float(ent)\ncel = (fahr - 32.0) * 5.0 / 9.0\nprint(cel)\nexcept:\nprint('Por favor, introduzca un n\u00famero')\n</code></pre> <p>Python comienza ejecutando la secuencia de sentencias del bloque try. Si todo va bien, se saltar\u00e1 todo el bloque except y terminar\u00e1. Si ocurre una excepci\u00f3n dentro del bloque try, Python saltar\u00e1 fuera de ese bloque y ejecutar\u00e1 la secuencia de sentencias del bloque except.</p> <pre><code>python fahren2.py\nIntroduzca la Temperatura Fahrenheit:72\n22.2222222222\npython fahren2.py\nIntroduzca la Temperatura Fahrenheit:fred\nPor favor, introduzca un n\u00famero\n</code></pre> <p>Gestionar una excepci\u00f3n con una sentencia try recibe el nombre de capturar una excepci\u00f3n. En este ejemplo, la clausula except muestra un mensaje de error. En general, capturar una excepci\u00f3n te da la oportunidad de corregir el problema, volverlo a intentar o, al menos, terminar el programa con elegancia.</p> <p>Nota</p> <p>Un buen recurso para completar el conocimiento sobre las estructuras de control es este</p> <p>Es especialmente interesante cuando explica los bucles y condicionales aplicados a listas, que veremos en el pr\u00f3ximo cap\u00edtulo.</p>"},{"location":"condicionales/#coding-time","title":"Coding time!","text":""},{"location":"condicionales/#ejercicio-1","title":"Ejercicio 1","text":"<p>Crea un programa que solicite un n\u00famero al usuario y devuelva el siguiente mensaje:</p> <ul> <li>Si es mayor que 0: \"Es un n\u00famero positivo.\"</li> <li>Si es igual a 0: \"Es igual a cero.</li> <li>Si es menor que 0: \"Es un n\u00famero negativo.\"</li> </ul> <p>Ejemplo 1:</p> <pre><code>Introduce un n\u00famero: 5\nEs un n\u00famero positivo\n</code></pre> <p>Ejemplo 2:</p> <pre><code>Introduce un n\u00famero: -3\nEs un n\u00famero negativo\n</code></pre>"},{"location":"condicionales/#ejercicio-2","title":"Ejercicio 2","text":"<p>Escribe un programa que solicite dos n\u00fameros enteros al usuario y muestre por pantalla la suma de todos los n\u00fameros enteros que hay entre los dos n\u00fameros (ambos n\u00fameros incluidos).</p> <p>Ejemplo 1:</p> <pre><code>Introduce el n\u00famero de inicio: 4\nIntroduce el n\u00famero de fin: 8\nEl resultado es:  30\n</code></pre> <p>Ejemplo 2:</p> <pre><code>Introduce el n\u00famero de inicio: 10\nIntroduce el n\u00famero de fin: 15\nEl resultado es:  75\n</code></pre>"},{"location":"condicionales/#ejercicio-3","title":"Ejercicio 3","text":"<p>Mejora el programa anterior para que muestre por separado la suma de los n\u00fameros pares y los impares.</p> <p>Ejemplo 1:</p> <pre><code>Introduce el n\u00famero de inicio: 4\nIntroduce el n\u00famero de fin: 8\nLos pares suman 18 y los impares 12\n</code></pre> <p>Ejemplo 2:</p> <pre><code>Introduce el n\u00famero de inicio: 10\nIntroduce el n\u00famero de fin: 15\nLos pares suman 36 y los impares 39\n</code></pre>"},{"location":"condicionales/#ejercicio-4","title":"Ejercicio 4","text":"<p>Escribe un programa que solicite al usuario un nombre de usuario y contrase\u00f1a. El programa mostrar\u00e1 el mensaje \"\u00a1Bienvenido!\" si el usuario introduce los siguientes datos:</p> <ul> <li>Nombre de usuario: root</li> <li>Contrase\u00f1a: toor</li> </ul> <p>Si los datos de acceso son incorrectos mostrar\u00e1 el mensaje \"Acceso fallido\" y el programa finalizar\u00e1.</p> <p>Ejemplo 1:</p> <pre><code>Introduce el nombre de usuario: root\nIntroduce la contrase\u00f1a: toor\n\u00a1Bienvenido!\n</code></pre> <p>Ejemplo 2:</p> <pre><code>Introduce el nombre de usuario: root\nIntroduce la contrase\u00f1a: 123456\nAcceso fallido\n</code></pre>"},{"location":"condicionales/#ejercicio-5","title":"Ejercicio 5","text":"<p>Mejora el programa anterior para que solo permita 3 intentos. Cada vez vez que el usuario introduzca datos de acceso incorrectos el programa mostrar\u00e1 el mensaje: \"Datos incorrectos. Le quedan X intentos.\", siendo X el n\u00famero de intentos restantes. Tras el tercer fallo el programa mostrar\u00e1 el mensaje \"Has agotado todos tus intentos.\" y finalizar\u00e1.</p> <p>Ejemplo:</p> <pre><code>Introduce el nombre de usuario: root\nIntroduce la contrase\u00f1a: 123456\nDatos incorrectos. Le quedan 2 intentos.\nIntroduce el nombre de usuario: root\nIntroduce la contrase\u00f1a: abcd\nDatos incorrectos. Le quedan 1 intentos.\nIntroduce el nombre de usuario: root\nIntroduce la contrase\u00f1a: 123abc\nDatos incorrectos. Le quedan 0 intentos.\n\nHas agotado todos tus intentos.\n</code></pre>"},{"location":"condicionales/#ejercicio-6","title":"Ejercicio 6","text":"<p>Crea un programa que reciba 5 n\u00fameros del usuario y muestre el mayor de todos por pantalla.</p> <p>Ejemplo:</p> <pre><code>Introduce un n\u00famero: 5\nIntroduce un n\u00famero: -10\nIntroduce un n\u00famero: 2\nIntroduce un n\u00famero: 14\nIntroduce un n\u00famero: 7\nEl n\u00famero m\u00e1s alto es:  14\n</code></pre>"},{"location":"condicionales/#ejercicio-7","title":"Ejercicio 7","text":"<p>Mejora el programa anterior, de forma que el usuario pueda introducir tantos n\u00fameros como quiera. El programa solicitar\u00e1 n\u00fameros al usuario hasta que introduzca la palabra \"fin\". Entonces mostrar\u00e1 el mayor de todos por pantalla.</p> <p>Ejemplo:</p> <pre><code>Introduce un n\u00famero: 6\nIntroduce un n\u00famero: 9\nIntroduce un n\u00famero: 11\nIntroduce un n\u00famero: 3\nIntroduce un n\u00famero: 5\nIntroduce un n\u00famero: fin\nEl n\u00famero m\u00e1s alto es:  11\n</code></pre> <ol> <li> <p>C\u00f3digo: https://es.py4e.com/code3/fahren2.py\u00a0\u21a9</p> </li> </ol>"},{"location":"diccionarios/","title":"Diccionarios","text":"<p>Un diccionario es un conjunto de parejas clave- valor (key-value). Es decir, se accede a cada elemento a partir de su clave. Se definen de la siguiente manera:</p> <pre><code>estudiante = {\n\"nombre\": \"Mart\u00ed Maci\u00e0\",\n\"edad\": 30,\n\"nota_media\": 7.25,\n\"repetidor\" : False\n}\n</code></pre> <p>Las claves tienen que ser \u00fanicas y estar formadas por un string o un n\u00famero. Para acceder al valor de una clave existen dos maneras distintas:</p> <pre><code># Acceder al valor de una clave\nedad = estudiante[\"edad\"] # devuelve el valor de 'edad'\nnota_media = estudiante.get(\"nota_media\") # devuelve el valor de 'nota_media'\n# Insertar o actualizar un valor:\nestudiante[\"edad\"] = 25 # actualiza el valor de 'edad'\nestudiante[\"suspensos\"] = 3 # inserta una nueva pareja clave - valor\n# insertar una pareja clave - valor o actualizar si ya existe:\nestudiante.update({'aprobados':'8'})\n</code></pre> <p>Algunos de los m\u00e9todos m\u00e1s utilizados son los siguientes:</p> M\u00e9todo Acci\u00f3n <code>diccionario.keys()</code> Devuelve todas las claves del diccionario <code>diccionario.values()</code> Devuelve todos los valores del diccionario <code>diccionario.pop(clave[,&lt;default&gt;])</code> Elimina la clave del diccionario y devuelve su valor asociado. Si no la encuentra y se indica un valor por defecto, devuelve el valor por defecto indicado. <code>diccionario.clear()</code> Vac\u00eda el diccionario <code>clave in diccionario</code> Devuelve True si el diccionario contiene la clave o False en caso contrario. <code>valor in diccionario.values()</code> Devuelve True si el diccionario contiene el valor o False en caso contrario."},{"location":"diccionarios/#recorrer-un-diccionario","title":"Recorrer un diccionario","text":"<p>La forma m\u00e1s habitual de recorrer un diccionario es mediante la sentencia <code>for</code>. Al recorrer un diccionario, por defecto se iterar\u00e1 sobre sus claves:</p> <p><pre><code>diccionario =  {'a':1,  'b':2,  'c':3}\nfor key in diccionario:\nprint(key)\n# Resultado: a b c\n</code></pre> Es decir, el c\u00f3digo anterior ser\u00e1 equivalente al siguiente: <pre><code>diccionario =  {'a':1,  'b':2,  'c':3}\nfor key in diccionario.keys():\nprint(key)\n# Resultado: a b c\n</code></pre> Por lo tanto, para iterar accediendo a los valores, realizaremos lo siguiente:</p> <p><pre><code>diccionario =  {'a':1,  'b':2,  'c':3}\nfor key in diccionario:\nprint(diccionario[key])\n# Resultado: 1 2 3\n</code></pre> Otro manera alternativa ser\u00eda empleando la funci\u00f3n <code>items()</code>, la cual devuelve el diccionario como tuplas de tipo (key,value): <pre><code>diccionario =  {'a':1,  'b':2,  'c':3}\nfor key, value in diccionario.items():\nprint(\"El valor de %s is %d\" % (key, value))\n# Resultado:\n# El valor de a is 1\n# El valor de b is 2\n# El valor de c is 3\n</code></pre></p>"},{"location":"diccionarios/#borrar-un-elemento","title":"Borrar un elemento","text":"<p>Para borrar un elemento de un diccionario se utiliza la instrucci\u00f3n <code>del</code>. <pre><code>edades = {\n\"Ana\" : 22,\n\"Jordi\" : 27,\n\"Aitor\" : 15\n}\ndel edades[\"Aitor\"]\n</code></pre> Otra alternativa tambi\u00e9n utilizada y mencionada anteriormente es la funci\u00f3n <code>pop()</code>, el cual devuelve el valor del elemento eliminado:</p> <p><pre><code>edades = {\n\"Ana\" : 22,\n\"Jordi\" : 27,\n\"Aitor\" : 15\n}\nedades.pop(\"Aitor\")\n</code></pre> Un diccionario nunca deber\u00eda contener dos claves iguales. No obstante, en caso de contener una clave repetida, tanto <code>del</code> como <code>pop()</code> eliminar\u00e1n todas las claves coincidentes.</p>"},{"location":"diccionarios/#diccionario-como-un-conjunto-de-contadores","title":"Diccionario como un conjunto de contadores","text":"<p>Supongamos que recibes una cadena y quieres contar cu\u00e1ntas veces aparece cada letra. Hay varias formas de hacerlo:</p> <ol> <li> <p>Puedes crear 26 variables, una por cada letra del alfabeto. Luego puedes recorrer la cadena, y para cada caracter, incrementar el contador correspondiente, probablemente utilizando varios condicionales.</p> </li> <li> <p>Puedes crear una lista con 26 elementos. Despu\u00e9s podr\u00edas convertir cada caracter en un n\u00famero (usando la funci\u00f3n interna <code>ord</code>), usar el n\u00famero como \u00edndice dentro de la lista, e incrementar el contador correspondiente.</p> </li> <li> <p>Puedes crear un diccionario con caracteres como claves y contadores como los valores correspondientes. La primera vez que encuentres un caracter, agregar\u00edas un elemento al diccionario. Despu\u00e9s de eso incrementar\u00edas el valor del elemento existente.</p> </li> </ol> <p>Cada una de esas opciones realiza la misma operaci\u00f3n computacional, pero cada una de ellas implementa esa operaci\u00f3n de forma diferente.</p> <p>Una implementaci\u00f3n es una forma de llevar a cabo una operaci\u00f3n computacional; algunas implementaciones son mejores que otras. Por ejemplo, una ventaja de la implementaci\u00f3n del diccionario es que no tenemos que saber con antelaci\u00f3n qu\u00e9 letras aparecen en la cadena y solamente necesitamos espacio para las letras que s\u00ed aparecen.</p> <p>Aqu\u00ed est\u00e1 un ejemplo de como ser\u00eda ese c\u00f3digo:</p> <pre><code>palabra = 'brontosaurio'\nd = dict()\nfor c in palabra:\nif c not in d:\nd[c] = 1\nelse:\nd[c] = d[c] + 1\nprint(d)\n</code></pre> <p>Realmente estamos calculando un histograma, el cual es un t\u00e9rmino estad\u00edstico para un conjunto de contadores (o frecuencias).</p> <p>El bucle for recorre la cadena. Cada vez que entramos al bucle, si el caracter c no est\u00e1 en el diccionario, creamos un nuevo elemento con la clave c y el valor inicial 1 (debido a que hemos visto esta letra solo una vez). Si c ya est\u00e1 previamente en el diccionario incrementamos d[c]. Aqu\u00ed est\u00e1 la salida del programa:</p> <pre><code>{'b': 1, 'r': 2, 'o': 3, 'n': 1, 't': 1, 's': 1, 'a': 1, 'u': 1, 'i': 1}\n</code></pre> <p>El histograma indica que las letras \u201ca\u201d y \u201cb\u201d aparecen solo una vez; \u201co\u201d aparece dos, y as\u00ed sucesivamente.</p> <p>Los diccionarios tienen un m\u00e9todo llamado <code>get</code> que toma una clave y un valor por defecto. Si la clave aparece en el diccionario, <code>get</code> regresa el valor correspondiente; sino, devuelve el valor por defecto. Por ejemplo:</p> <p><pre><code>&gt;&gt;&gt; cuentas = { 'chuck' : 1 , 'annie' : 42, 'jan': 100}\n&gt;&gt;&gt; print(cuentas.get('jan', 0))\n100\n&gt;&gt;&gt; print(cuentas.get('tim', 0))\n0\n</code></pre> Podemos usar <code>get</code> para escribir nuestro bucle de histograma m\u00e1s conciso. Puesto que el m\u00e9todo get autom\u00e1ticamente maneja el caso en que una clave no est\u00e1 en el diccionario, podemos reducir cuatro l\u00edneas a una y eliminar la sentencia <code>if</code>.</p> <pre><code>palabra = 'brontosaurio'\nd = dict()\nfor c in palabra:\nd[c] = d.get(c,0) + 1\nprint(d)\n</code></pre> <p>El uso del m\u00e9todo get para simplificar este bucle contador termina siendo un \u201cidioma\u201d muy utilizado en Python.</p> <p>Tom\u00e1os un momento para comparar el bucle utilizando la sentencia <code>if</code> y el operador <code>in</code> con el bucle utilizando el m\u00e9todo <code>get</code>. Ambos hacen exactamente lo mismo, pero uno es m\u00e1s breve.</p> <p>Nota</p> <p>Para completar todo lo relativo a diccionarios y descubrir el concepto de nesting (diccionarios de listas, listas de diccionarios, diccionarios dentro de diccionarios...), pod\u00e9is consultar esta parte de este cap\u00edtulo.</p>"},{"location":"diccionarios/#coding-time","title":"Coding time!","text":""},{"location":"diccionarios/#ejercicio-1","title":"Ejercicio 1","text":"<p>Crea un programa que recorra una lista y cree un diccionario que contenga el n\u00famero de veces que aparece cada n\u00famero en la lista.</p> <ul> <li> <p>Ejemplo: <code>[12, 23, 5, 12, 92, 5,12, 5, 29, 92, 64,23]</code></p> </li> <li> <p>Resultado: <code>{12: 3, 23: 2, 5: 3, 92: 2, 29: 1, 64: 1}</code></p> </li> </ul>"},{"location":"diccionarios/#ejercicio-2","title":"Ejercicio 2","text":"<p>Recorre un diccionario y crea una lista solo con los valores que contiene, sin a\u00f1adir valores duplicados.</p> <ul> <li> <p>Ejemplo: <code>{'Mikel': 3, 'Ana': 8, 'Amaia': 12, 'Unai': 5, 'Jon': 8, 'Ainhoa': 7, 'Maite': 5}</code></p> </li> <li> <p>Resultado: <code>[3, 8, 12, 5, 7]</code></p> </li> </ul>"},{"location":"diccionarios/#ejercicio-3","title":"Ejercicio 3","text":"<p>Crea una programa de Login que compruebe el usuario y contrase\u00f1a en el diccionario a continuaci\u00f3n:</p> <pre><code>usuarios = {  \n\"mmacia\": {  \n\"nombre\": \"Mart\u00ed\",  \n\"apellido\": \"Maci\u00e0\",  \n\"password\": \"123123\"  \n},  \n\"fmuguruza\": {  \n\"nombre\": \"Ferm\u00edn\",  \n\"apellido\": \"Muguruza\",  \n\"password\": \"654321\"  \n},  \n\"cbiriukov\": {  \n\"nombre\": \"Chechu\",  \n\"apellido\": \"Biriukov\",  \n\"password\": \"123456\"  \n}  \n}\n</code></pre> <p>El usuario tendr\u00e1 un m\u00e1ximo de 3 intentos, y al acceder correctamente se mostrar\u00e1 el nombre y apellido del usuario.</p>"},{"location":"diccionarios/#ejercicio-4","title":"Ejercicio 4","text":"<p>Crea un programa que permita introducir a un profesor las notas de sus estudiantes (m\u00e1ximo 10 estudiantes). Los datos se deber\u00e1n almacenar en un diccionario como el siguiente:</p> <p><pre><code>estudiantes = {  \n\"1\": {  \n\"nombre\": \"Lorena\",  \n\"nota\": 8  \n},  \n\"2\": {  \n\"nombre\": \"Marcel\",  \n\"nota\": \"4.2\"  \n},  \n\"3\": {  \n\"nombre\": \"Julio\",  \n\"nota\": 6.5  \n}  \n}\n</code></pre> Una vez introducidos todos los datos, el programa mostrar\u00e1 una lista con los nombres de los estudiantes que han suspendido y otra con los que han aprobado. Tambi\u00e9n calcular\u00e1 y mostrar\u00e1 la nota media de la clase.</p>"},{"location":"excepciones/","title":"Excepciones","text":"<p>Las excepciones son errores en la ejecuci\u00f3n de un programa que hacen que el programa termine de forma inesperada. Normalmente ocurren debido a un uso indebido de los datos (p.ej. una divisi\u00f3n entre cero). La manera de controlar las excepciones es agrupando el c\u00f3digo en 2 bloques (m\u00e1s 1 opcional):</p> <ul> <li><code>try</code>: agrupa el bloque de c\u00f3digo en el que se pueda dar una excepci\u00f3n.</li> <li><code>catch</code>: contiene el c\u00f3digo a ejecutar en caso de que la excepci\u00f3n haya    sido lanzada.</li> <li><code>finally</code> (opcional): permite ejecutar un bloque de    c\u00f3digo siempre,    se haya capturado o no una excepci\u00f3n.</li> </ul> <pre><code>try:\nnumero = int(input(\u2018Introduce un n\u00famero: \u2018))\ndividendo = 150\nresultado = dividendo / numero\nprint(resultado)\nexcept ValueError:\nprint(\u2018N\u00famero inv\u00e1lido\u2019)\nexcept ZeroDivisionError:\nprint(\u2018No se puede dividir entre 0\u2019)\nfinally:\nprint(\"Ejecutando finally antes de salir\")\n</code></pre> <p>Tambi\u00e9n es posible lanzar excepciones de forma controlada mediante la sentencia raise.</p> <pre><code>    raise NameError('\u00a1Soy una excepci\u00f3n!')\n</code></pre>"},{"location":"excepciones/#excepciones-comunes","title":"Excepciones comunes","text":"<p>Hay algunas excepciones que son bastante comunes a la hora de programar en Python y que deber\u00edamos contemplar en nuestros programas:</p> <p>TypeError  es lanzado cuando se intenta realizar una operaci\u00f3n o una funci\u00f3n sobre un objeto de un tipo inapropiado. <pre><code>&gt;&gt;&gt; '1'+1  \nTraceback (most recent call last):  \nFile \"&lt;pyshell#23&gt;\", line 1, in &lt;module&gt;  \n'2'+2  \nTypeError: must be str, not int\n</code></pre></p> <p>ValueError  es lanzado cuando el argumento de una funci\u00f3n es de un tipo inapropiado. <pre><code>&gt;&gt;&gt; int('hola')  \nTraceback (most recent call last):  \nFile \"&lt;pyshell#14&gt;\", line 1, in &lt;module&gt;  \nint('xyz')  \nValueError: invalid literal for int() with base 10: 'hola'\n</code></pre></p> <p>NameError  es lanzado cuando no utiliza un objeto que no existe. <pre><code>&gt;&gt;&gt; persona  \nTraceback (most recent call last):  \nFile \"&lt;pyshell#6&gt;\", line 1, in &lt;module&gt;  \nage  \nNameError: name 'persona' is not defined\n</code></pre></p> <p>IndexError es lanzado al intentar acceder a un \u00edndice que no existe en un array. <pre><code>&gt;&gt;&gt; lista = [1,2,3]  \n&gt;&gt;&gt; lista[5]  \nTraceback (most recent call last):  \nFile \"&lt;pyshell#18&gt;\", line 1, in &lt;module&gt;  \nlista[5]  \nIndexError: list index out of range\n</code></pre></p> <p>KeyError  es lanzado cuando no se encuentra la clave (key), <pre><code>&gt;&gt;&gt; diccionario={'1':\"esto\", '2':\"es\", '3':\"python\"}  \n&gt;&gt;&gt; diccionario['4']  \nTraceback (most recent call last):  \nFile \"&lt;pyshell#15&gt;\", line 1, in &lt;module&gt;  \ndiccionario['4']  \nKeyError: '4'\n</code></pre></p> <p>ModuleNotFoundError es lanzado cuando no se encuentra el m\u00f3dulo indicado. <pre><code>&gt;&gt;&gt; import mimodulo  \nTraceback (most recent call last):  \nFile \"&lt;pyshell#10&gt;\", line 1, in &lt;module&gt;  \nimport mimodulo  \nModuleNotFoundError: No module named 'mimodulo'\n</code></pre></p>"},{"location":"excepciones/#coding-time","title":"Coding time!","text":""},{"location":"excepciones/#ejercicio-1","title":"Ejercicio 1","text":"<p>Crea un programa que acceda a la posici\u00f3n que el usuario indique de la siguiente lista: <code>[6,14,11,3,2,1,15,19]</code>. No olvides capturar las excepciones que puedan surgir en caso de que el usuario introduzca un \u00edndice incorrecto o que no exista en la lista.</p>"},{"location":"excepciones/#ejercicio-2","title":"Ejercicio 2","text":"<p>Crea una aplicaci\u00f3n reciba la clave de un diccionario y acceda a uno de sus valores. Aseg\u00farate de que capturas las excepciones que puedan saltar al intentar acceder a una clave del diccionario inexistente.</p>"},{"location":"funciones/","title":"Funciones","text":"<p>Una funci\u00f3n es un grupo de sentencias que realizan una tarea concreta. Esta forma de agrupar c\u00f3digo es una forma de ordenar nuestra aplicaci\u00f3n en peque\u00f1os bloques, facilitando as\u00ed su lectura y permitiendo reutilizar el c\u00f3digo que contienen sin esfuerzo.</p>"},{"location":"funciones/#definir-y-llamar-a-una-funcion","title":"Definir y llamar a una funci\u00f3n","text":"<p>La sintaxis de una funci\u00f3n en Python es la siguiente:</p> <pre><code>def saludo(nombre):\n# codigo de la funci\u00f3n\nprint(\"Hola, \" + nombre+ \". \u00a1Bienvenido!\")\n</code></pre> <p>Se escribe la palabra reservada <code>def</code> seguida del nombre de la funci\u00f3n y sus par\u00e1metros entre par\u00e9ntesis.</p> <p>Para llamar a una funci\u00f3n solo hay que escribir el nombre de la funci\u00f3n seguida de los par\u00e1metros (si los hubiera) entre par\u00e9ntesis.</p> <pre><code>&gt;&gt;&gt; saludo('Maitane')\nHola, Maitane. \u00a1Bienvenida!\n</code></pre> <p>Es posible asignar al par\u00e1metro un valor por defecto.</p> <p><pre><code>def saludo(nombre = \"An\u00f3nimo\"):  \nprint(\"Hola, \" + nombre+ \". \u00a1Bienvenido!\")\nsaludo(\"Leire\") # Hola, Maitane. \u00a1Bienvenida!\nsaludo() # Hola, An\u00f3nimo. \u00a1Bienvenida!\n</code></pre> Existen dos tipos de par\u00e1metros o argumentos:</p> <ul> <li>Par\u00e1metros posicionales: la posici\u00f3n en la que se pasan importa</li> <li>Par\u00e1metros con palabra clave (keyword arguments): la posici\u00f3n no    importa, se indica una clave para cada par\u00e1metro.</li> </ul> <pre><code>def suma(a, b):\nresultado = a + b\nprint(resultado)\nsuma(45, 20) # par\u00e1metros posicionales\nsuma(b=20,a=45) # parametros mediante clave\n</code></pre> <p>Las funciones pueden devolver un valor utilizando la palabra <code>return</code>. Una vez devuelto un valor, la funci\u00f3n finaliza su ejecuci\u00f3n.</p> <pre><code>def suma(a, b):\nresultado = a + b\nreturn resultado\nprint(suma(4,5)) # 9\n</code></pre>"},{"location":"funciones/#funciones-con-argumentos-multiples","title":"Funciones con argumentos m\u00faltiples","text":"<p>Es posible recibir un n\u00famero desconocido de par\u00e1metros a\u00f1adiendo un <code>*</code> en la definici\u00f3n de la funci\u00f3n.</p> <pre><code>def suma_todo(*args):\nresultado = 0\nfor i in args:\nresultado += i\nreturn resultado\nv, w, x, y, z = 5, 2, 12, 6, 9\ntotal = suma_todo(v, w, x, y, z)\nprint(\"La suma total es:\" + str(total))  # La suma total es: 34\n</code></pre>"},{"location":"funciones/#ambito-de-las-variables-scope","title":"\u00c1mbito de las variables (scope)","text":"<p>El \u00e1mbito de una variable (scope) se refiere a la zona del programa d\u00f3nde una variable \"existe\". Fuera del \u00e1mbito de una variable no podremos acceder a su valor ni manejarla.</p> <p>Los par\u00e1metros y variables definidos en una funci\u00f3n no estar\u00e1n accesibles fuera de la funci\u00f3n. A este \u00e1mbito se le conoce como \u00e1mbito local. Es importante mencionar que una vez ejecutada una funci\u00f3n, el valor de las variables locales no se almacena, por lo que la pr\u00f3xima vez que se llame a la funci\u00f3n, \u00e9sta no recordar\u00e1 ning\u00fan valor de llamadas anteriores.</p> <pre><code>def calcula():\na = 1\nprint(\"Dentro de la funci\u00f3n:\", a)\na = 5\ncalcula()\nprint(\"Fuera de la funci\u00f3n:\", a)\n### Output ###\n# Dentro de la funci\u00f3n:1\n# Fuera de la funci\u00f3n:5\n</code></pre> <p>Por el contrario, las variables definidas fuera de una funci\u00f3n s\u00ed que est\u00e1n accesibles desde dentro de la funci\u00f3n. Se considera que est\u00e1n en el \u00e1mbito global. No obstante, no se podr\u00e1n modificar dentro de la funci\u00f3n a no ser que est\u00e9n definidas con la palabra clave <code>global</code>.</p>"},{"location":"funciones/#funciones-internas","title":"Funciones internas","text":"<p>Python proporciona un n\u00famero importante de funciones denominadas built-in o internas, que pueden ser usadas sin necesidad de tener que definirlas previamente. </p> <p>Los creadores de Python han escrito este conjunto de funciones para resolver problemas comunes y las han incluido en Python para que las podamos utilizar.</p> <p>Un ejemplo son las funciones <code>max</code> y <code>min</code> nos dar\u00e1n respectivamente el valor mayor y menor de una lista.</p> <p>Dependiendo de la versi\u00f3n de Python utilizada, la lista podr\u00e1 diferir. Para <code>Python 3.10.6</code> estas funciones son:</p> <p></p> <p>Y el funcionamiento de cada una de ellas puede consultarse aqu\u00ed.</p>"},{"location":"funciones/#por-que-necesitamos-las-funciones","title":"\u00bfPor qu\u00e9 necesitamos las funciones?","text":"<p>Puede no estar muy claro por qu\u00e9 merece la pena molestarse en dividir un programa en funciones. Existen varias razones:</p> <ul> <li> <p>El crear una funci\u00f3n nueva te da la oportunidad de dar nombre a un grupo de sentencias, lo cual hace tu programa m\u00e1s f\u00e1cil de leer, entender y depurar. Las funciones pueden hacer un programa m\u00e1s peque\u00f1o, al eliminar c\u00f3digo repetido. Adem\u00e1s, si quieres realizar cualquier cambio en el futuro, s\u00f3lo tendr\u00e1s que hacerlo en un \u00fanico lugar.</p> </li> <li> <p>Dividir un programa largo en funciones te permite depurar las partes de una en una y luego ensamblarlas juntas en una sola pieza.</p> </li> <li> <p>Las funciones bien dise\u00f1adas a menudo resultan \u00fatiles para otros muchos programas. Una vez que has escrito y depurado una, puedes reutilizarla.</p> </li> </ul> <p>Parte de la habilidad de crear y usar funciones consiste en llegar a tener una funci\u00f3n que represente correctamente una idea, como \u201cencontrar el valor m\u00e1s peque\u00f1o en una lista de valores\u201d, por ejemplo.</p>"},{"location":"funciones/#coding-time","title":"Coding time!","text":""},{"location":"funciones/#ejercicio-1","title":"Ejercicio 1","text":"<p>Crea un programa que determine si un n\u00famero es primo o no. Deber\u00e1s crear la funci\u00f3n <code>esPrimo()</code> que reciba como par\u00e1metro un n\u00famero y devuelva <code>True</code> o <code>False</code> indicando si el n\u00famero es primo o no.</p>"},{"location":"funciones/#ejercicio-2","title":"Ejercicio 2","text":"<p>Crea un programa que genere un n\u00famero aleatorio del 1 al 10. El usuario tendr\u00e1 que adivinarlo, y el programa tras cada intento le indicar\u00e1 al usuario si el n\u00famero es m\u00e1s alto, bajo o si ha acertado. La l\u00f3gica para dar la respuesta al usuario deber\u00e1 estar incluida en una funci\u00f3n a la que se llamar\u00e1 tras cada intento.</p> <p>Nota: Para la creaci\u00f3n del n\u00famero aleatorio, utiliza el siguiente c\u00f3digo:</p> <pre><code>from random import randint, uniform,random\nnumero = randint(0,10)\n</code></pre>"},{"location":"funciones/#ejercicio-3","title":"Ejercicio 3","text":"<p>Crea un programa que reciba un n\u00famero del 1 al 20 introducido por el usuario y compruebe si est\u00e1 dentro de la siguiente lista: <code>[6,14,11,3,2,1,15,19]</code>. Implementa una funci\u00f3n que se asegure que el n\u00famero introducido por el usuario est\u00e1 en el rango indicado y otra que compruebe si est\u00e1 dentro de la lista. Trata de crear las funciones de forma que puedan ser reutilizadas lo m\u00e1ximo posible en otros programas.</p>"},{"location":"intro/","title":"Python para ciberseguridad - Introducci\u00f3n","text":""},{"location":"intro/#por-que-python","title":"\u00bfPor qu\u00e9 Python?","text":"<p>En t\u00e9rminos generales, Python tiene una serie de beneficios que conviene destacar y que lo han convertido casi en est\u00e1ndar de facto en distintos campos como la ciberseguridad, por ejemplo.</p> <p>Algunos de estos beneficios son:</p>"},{"location":"intro/#python-es-facil-de-aprender-e-implementar","title":"Python es f\u00e1cil de aprender e implementar","text":"<p>Python fue dise\u00f1ado intencionadamente para ser un lenguaje de programaci\u00f3n sencillo, f\u00e1cil y, en general, ligero, que requiriera un c\u00f3digo m\u00ednimo para realizar las tareas en comparaci\u00f3n con otros lenguajes. </p> <p>El hecho es que Python a menudo requiere mucho menos c\u00f3digo que el que se requerir\u00eda de otros lenguajes de programaci\u00f3n, como C o Java. La naturaleza de Python da lugar a una curva de aprendizaje m\u00e1s corta para cualquiera que trabaje con el lenguaje, especialmente para aquellos que son nuevos en la programaci\u00f3n.</p>"},{"location":"intro/#python-facilita-el-debugging-o-depuracion","title":"Python facilita el debugging o depuraci\u00f3n","text":"<p>Ya hemos hablado del hecho de que la estructura de Python hace que sea m\u00e1s f\u00e1cil de aprender e implementar, pero esa naturaleza b\u00e1sica tambi\u00e9n tiene otros beneficios.</p> <p>El dise\u00f1o directo de Python y su facilidad de uso tambi\u00e9n aumentan su legibilidad. El aumento de la legibilidad tambi\u00e9n hace que la depuraci\u00f3n del c\u00f3digo sea mucho m\u00e1s sencilla, lo que significa que incluso los programadores de bajo nivel o principiantes pueden solucionar problemas y depurar su propio c\u00f3digo con bastante eficacia y que la correcci\u00f3n de errores puede llevernos mucho menos tiempo en general.</p>"},{"location":"intro/#es-open-source","title":"Es open source","text":"<p>Python fue desarrollado como un lenguaje de programaci\u00f3n de c\u00f3digo abierto, de forma similar a Linux.</p> <p>La naturaleza de c\u00f3digo abierto de Python se presta a una fuerte comunidad de desarrolladores que apoyan el lenguaje y lo hacen avanzar. Dado que Python es de c\u00f3digo abierto, hay una gran cantidad de informaci\u00f3n disponible, y el uso del lenguaje es gratuito.</p>"},{"location":"intro/#manejo-automatico-de-la-memoria","title":"Manejo autom\u00e1tico de la memoria","text":"<p>Otro beneficio de Python que algunas personas no tienen en cuenta es que tiene la gesti\u00f3n de la memoria incorporada autom\u00e1ticamente por dise\u00f1o.</p> <p>La gesti\u00f3n de memoria de Python se realiza internamente mediante su propio gestor. Esto significa que el programador y el usuario deben preocuparse menos por la gesti\u00f3n de la memoria, incluyendo factores como el almacenamiento en cach\u00e9, la asignaci\u00f3n de memoria y la segmentaci\u00f3n.</p> <p></p>"},{"location":"intro/#por-que-python-en-ciberseguridad","title":"\u00bfPor qu\u00e9 Python en ciberseguridad?","text":"<p>Ya hemos hablado de las ventajas del lenguaje de programaci\u00f3n Python, y de que se utiliza en muchos campos. Ahora vamos a profundizar en por qu\u00e9 Python es tan \u00fatil para el campo de la ciberseguridad.</p> Aut\u00e9ntico hacker de \u00e9lite megamacropro siendo muy chungo en Python"},{"location":"intro/#es-un-lenguaje-interpretado","title":"Es un lenguaje interpretado","text":"<p>Esto quiere decir que no necesita ser compilado para cada arquitectura concreta, por lo que es mucho m\u00e1s f\u00e1cil desarrollar scripts, pruebas de concepto o malware casi universal. Adem\u00e1s, esto unido a que Python viene instalado por defecto en un gran n\u00famero de distribuciones Linux, lo hacen muy atractivo tanto desde el punto de vista del atacante como del defenseor.</p>"},{"location":"intro/#python-se-puede-utilizar-para-practicamente-todo-en-ciberseguridad","title":"Python se puede utilizar para pr\u00e1cticamente todo en ciberseguridad","text":"<p>Cualquier profesional de la ciberseguridad que sea un experto en Python, podr\u00e1 llevar a cabo casi cualquier tarea que se proponga. </p> <p>Por ejemplo, Python puede utilizarse para crear payloads, para el an\u00e1lisis de malware, para la decodificaci\u00f3n de paquetes, para el acceso a servidores, para el escaneo de redes o para el escaneo de puertos, entre otras cosas.</p> <p>Python en ciberseguridad puede utilizarse tambi\u00e9n para la automatizaci\u00f3n, lo que hace que la fase de reconocimiento  o recopilaci\u00f3n de informaci\u00f3n de un pentesting sea mucho m\u00e1s f\u00e1cil y ahorre tiempo. </p> <p>Hay que pensar que en ciberseguridad, m\u00e1s que programas completos, se suelen desarrollar scripts r\u00e1pidos y funcionales.</p>"},{"location":"intro/#la-amplia-variedad-de-librerias-de-python","title":"La amplia variedad de librer\u00edas de Python","text":"<p>Como hemos descrito anteriormente, la facilidad de uso de Python es sin duda uno de los factores m\u00e1s importantes que lo convierten en un lenguaje de referencia para los profesionales de la ciberseguridad.  Pero ciertamente, la extensa biblioteca de m\u00f3dulos de Python es un factor principal tambi\u00e9n.</p> <p>Python se ha convertido en un lenguaje muy conocido y utilizado, debido a su extensa biblioteca, lo que significa que los profesionales de la ciberseguridad no necesitan reinventar la rueda con tareas comunes y en la mayor\u00eda de los casos pueden encontrar r\u00e1pidamente una herramienta de an\u00e1lisis de ciberseguridad o de pruebas de pentesting ya disponible.</p>"},{"location":"intro/#python-se-puede-usar-para-casi-todo-en-ciberseguridad","title":"Python se puede usar para casi todo en ciberseguridad","text":"<p>Con un buen conocimiento de Python y de los conceptos de programaci\u00f3n en general, los profesionales de la ciberseguridad pueden realizar casi cualquier tarea que necesiten utilizando c\u00f3digo Python.</p> <p>Por ejemplo, Python se utiliza mucho en el an\u00e1lisis de malware, el descubrimiento de hosts, el env\u00edo y la decodificaci\u00f3n de paquetes, el acceso a servidores, el escaneo de puertos y el escaneo de redes, por nombrar s\u00f3lo algunos. Teniendo en cuenta tambi\u00e9n que es tan eficaz en la creaci\u00f3n de scripts, la automatizaci\u00f3n de tareas y el an\u00e1lisis de datos, es comprensible que Python haya aumentado su popularidad a medida que la ciberseguridad se ha vuelto m\u00e1s importante.</p>"},{"location":"intro/#los-scripts-en-python-son-muy-rapidos-de-desarrollar","title":"Los scripts en Python son muy r\u00e1pidos de desarrollar","text":"<p>Otro beneficio de Python que ayuda a los profesionales de la ciberseguridad es que la facilidad del c\u00f3digo significa que los ciberprofesionales pueden desarrollar las soluciones que necesitan con una cantidad m\u00ednima de tiempo, y con un c\u00f3digo bastante simplista.</p> <p>Esto significa que, por ejemplo, desarrollar un script a modo de exploit como prueba de concepto para demostrar una vulnerabilidad detectada, puede llevar relativamente poco tiempo.</p> <p>Y para finalizar, una buena y completa respuesta que he encontrado en Quora, lo describe perfectamente:</p> Why is Python preferred by most of the cybersecurity personnels?"},{"location":"intro/#python2-o-python3","title":"\u00bfPython2 o Python3?","text":"<p>Python fue lanzado por primera vez en 1991 por el programador holand\u00e9s Guido van Rossum. Desde entonces, ha sufrido muchos cambios. Hoy en d\u00eda, hay tres versiones principales de Python. De ellas, s\u00f3lo las dos \u00faltimas versiones -Python 2 y Python 3- siguen en uso.</p> <p>Esto puede resultar confuso para los nuevos desarrolladores. \u00bfQu\u00e9 se deber\u00eda aprender, Python 2 o Python 3? Generalmente, la respuesta es la segunda, pero hay muchos casos en los que ayuda conocer la primera.</p> <p>Exploraremos la historia y el desarrollo del lenguaje, las diferencias entre Python 2 y Python 3, y los casos de uso de cada uno en los p\u00e1rrafos siguientes.</p>"},{"location":"intro/#historia-de-python2-vs-python3","title":"Historia de Python2 vs Python3","text":"<p>Python 2 apareci\u00f3 en el a\u00f1o 2000. La actualizaci\u00f3n del lenguaje se dise\u00f1\u00f3 para facilitar el aprendizaje de la persona promedio, pero tambi\u00e9n agreg\u00f3 muchas caracter\u00edsticas que los desarrolladores necesitaban, como la comprensi\u00f3n de listas, el soporte de Unicode, la recolecci\u00f3n de basura y el soporte mejorado para la programaci\u00f3n orientada a objetos. Con todas estas ventajas, no fue dif\u00edcil para los desarrolladores actualizar su c\u00f3digo de Python 1 a Python 2.</p> <p>Python 3 sali\u00f3 en 2008 despu\u00e9s de que van Rossum encontrara nuevas formas de mejorar el lenguaje. En la programaci\u00f3n se aprende sobre la marcha, y a veces los problemas s\u00f3lo aparecen al final del proceso. Pero estas mejoras s\u00f3lo pod\u00edan hacerse con una nueva versi\u00f3n de Python que no fuera compatible con Python 2.</p> <p></p> <p>La falta de retrocompatibilidad de Python 3 era un problema para muchos desarrolladores, ya que depend\u00edan de las bibliotecas de terceros escritas para soportar Python 2 para agilizar el desarrollo de sus aplicaciones. Dada la popularidad de Python y sus bibliotecas asociadas, el c\u00f3digo de Python 2 estaba por todas partes, y era dif\u00edcil conseguir que la gente hiciera el cambio.</p> <p>La \u00faltima versi\u00f3n de Python 2 se public\u00f3 en 2010, despu\u00e9s del lanzamiento inicial de Python 3. Inicialmente, se supon\u00eda que el soporte para Python 2 terminar\u00eda en 2015, pero debido a que segu\u00eda siendo tan ampliamente utilizado, la fecha l\u00edmite se retras\u00f3 hasta enero de 2020.</p> <p>Resumiendo</p> <p>Se debe aprender o seguir desarrollando en Python3 ya que Python2 est\u00e1 obsoleto y fuera de soporte. No obstante, mucho c\u00f3digo legacy, librer\u00edas de terceros y, en nuestro caso, muchos exploits y pruebas de concepto siguen estando escritos en Python2, por lo que es necesario, al menos, conocerlo.</p>"},{"location":"intro/#diferencias-entre-python2-y-python3","title":"Diferencias entre Python2 y Python3","text":"<p>Las diferencias pueden ser sustanciales en algunos casos. Dado que no es el objetivo de este curso, os dejo aqu\u00ed un sitio web donde se explican de una forma m\u00e1s o menos detalladas.</p> <p>Esta imagen lo muestra de una form aresumida:</p> <p></p> <p>Otros recursos, en ingl\u00e9s, para consultar las diferencias de forma detallada son este y este.</p>"},{"location":"intro/#instalacion-de-python","title":"Instalaci\u00f3n de Python","text":"<p>Como era de esperar, es imprescindible tener instalado en nuestro sistema Python para poder utilizar Python, sorpresas nos da la vida. Dicho esto, veamos c\u00f3mo hacerlo.</p>"},{"location":"intro/#python3","title":"Python3","text":"<p>En este curso yo trabajar\u00e9 \u00edntegramente con Python3 en Linux, lo cual no es \u00f3bice para que vosotros pod\u00e1is usarlo en Windows, OSX o WSL si as\u00ed lo dese\u00e1is. Una idea es utilizar una m\u00e1quina virtual Linux o un contenedor Docker pero, de nuevo, s\u00f3is libres de elegir.</p> <p>En la misma medida, el IDE que utilizar\u00e9 ser\u00e1 Visual Studio Code en Linux. Vosotros s\u00f3is libres de utilizar \u00e9ste en Windows, Linux, OSX o cualquier otro IDE(como Anaconda por ejemplo) en cualquier sistema.</p> <p>La instalaci\u00f3n en Windows es igual de sencilla que cualquier otro software y pod\u00e9is realizarsa siguiendo tutoriales como este, este o este</p> <p>Para Linux y MacOSX en el \u00faltimo tutorial de los anteriores hay unas secciones dedicadas a ellos. Para Linux Debian o similares como Ubuntu y Mint, pod\u00e9is seguir los pasos que se indican aqu\u00ed o aqu\u00ed.</p> <p>Para cualquier Linux que no sea Debian, probablemente no sea necesario daros instrucciones sobre c\u00f3mo encontrar la forma de instalarlo.</p>"},{"location":"intro/#ambientes-virtuales-y-pipenv","title":"Ambientes virtuales y pipenv","text":""},{"location":"intro/#entornos-virtuales-en-python","title":"Entornos virtuales en Python","text":"<p>Un entorno virtual es una forma de tener m\u00faltiples instancias paralelas del int\u00e9rprete de Python, cada una con diferentes conjuntos de paquetes y diferentes configuraciones. Cada entorno virtual contiene una copia independiente del int\u00e9rprete de Python, incluyendo copias de sus utilidades de soporte.</p> <p>Los paquetes instalados en cada entorno virtual s\u00f3lo se ven en ese entorno virtual y en ning\u00fan otro. Incluso los paquetes grandes y complejos con binarios dependientes de la plataforma pueden ser aislados entre s\u00ed en entornos virtuales.</p> <p>De esta forma, tendremos entornos independientes entre s\u00ed, parecido a como ocurre con los directorios de los proyectos de <code>Node.js</code> y <code>npm</code>. De este modo, los entornos virtuales de Python nos permiten instalar un paquete de Python en una ubicaci\u00f3n aislada en lugar de instalarlo de manera global.</p>"},{"location":"intro/#pipenv","title":"Pipenv","text":"<p><code>Pipenv</code> es una herramienta que apunta a traer todo lo mejor del mundo de empaquetado (bundler, composer, npm, cargo, yarn, etc.) al mundo de Python. </p> <p></p> <p>Autom\u00e1ticamente crea y maneja un entorno virtual para tus proyectos, tambi\u00e9n permite agregar/eliminar paquetes desde tu Pipfile as\u00ed como como instalar/desinstalar paquetes. Tambi\u00e9n genera lo m\u00e1s importante , el archivo <code>Pipfile.lock</code>, que es usado para producir determinado build.</p> <p></p>"},{"location":"intro/#instalar-pipenv","title":"Instalar <code>pipenv</code>","text":"<p>En Linux:</p> <ol> <li> <p>Instalamos el gestor de paquetes de Python pip:</p> <pre><code>sudo apt-get update\n\nsudo apt-get install python3-pip\n</code></pre> </li> <li> <p>Instalamos el paquete <code>pipenv</code> para gestionar los entornos virtuales:</p> <pre><code>pip3 install pipenv\n</code></pre> </li> <li> <p>Y comprobamos que est\u00e1 instalado correctamente mostrando su versi\u00f3n:</p> <pre><code>pipenv --version\n</code></pre> </li> </ol> <p>En Windows:</p> <ol> <li> <p>Instalamos pip mediante el script <code>get-pip.py</code> siguiendo el procedimiento que se nos indica aqu\u00ed o aqu\u00ed</p> </li> <li> <p>Ejecutar:     <pre><code>pip install pipenv\n</code></pre></p> </li> </ol>"},{"location":"intro/#referencias","title":"Referencias","text":"<p>5 Big Reasons Python is Useful in Cybersecurity</p> <p>Beginners Guide on Python for Cybersecurity</p> <p>Python 2 vs. Python 3: Which should you learn?</p> <p> Pipenv: gestor de entornos virtuales de Python </p> <p>Configure a Pipenv environment</p>"},{"location":"keylogger/","title":"Programamos un keylogger","text":"<p>Este ejercicio consistir\u00e1 en programar un tipo de keylogger para Linux.</p> <p>Se ofrecen dos v\u00edas para implementar este ejercicio, una sencilla y otra una versi\u00f3n mejorada para los m\u00e1s avezados.</p> <p>Consejo</p> <p>Os recomiendo crear un nuevo entorno virtual con <code>pipenv</code> y sobre \u00e9l instalar los paquetes que sean necesarios.</p>"},{"location":"keylogger/#version-sencilla","title":"Versi\u00f3n sencilla","text":"<p>Esta versi\u00f3n lo \u00fanico que har\u00e1 ser\u00e1 mostrar por pantalla continuamente una lista con lo que contiene nuestro portapapeles, a\u00f1adiendo un nuevo elemento a esta lista cada vez que se copia algo a dicho portapapeles (<code>CTRL+C</code>).</p> <p>Vamos a utilizar una biblioteca concreta, que deber\u00e9is instalar y sobre la que deb\u00e9is informaros a prop\u00f3sito de su sencillo funcionamiento:</p> <ul> <li>Pyperclip</li> </ul> <p>Los pasos a seguir ser\u00e1n:</p> <ol> <li>Importar la biblioteca</li> <li>Crear una lista vac\u00eda, que ser\u00e1 la que contendr\u00e1 el contenido del portapapeles</li> <li>Tras ello, deb\u00e9is crear un bucle infinito:</li> <li>Si el contenido del portapapeles no est\u00e1 vac\u00edo (<code>''</code>) debemos guardar su valor en una variable<ol> <li>Para asegurarnos de no guardar valores repetidos, si el valor del punto anterior no est\u00e1 en la lista, a\u00f1adimos el valor al final de la lista</li> <li>Imprimimos la lista por pantall</li> </ol> </li> </ol> <p>Una mejora muy sencilla de este ejercicio ser\u00eda guardar el resultado en un archivo <code>.txt</code>.</p>"},{"location":"keylogger/#version-mejorada","title":"Versi\u00f3n mejorada","text":""},{"location":"listas/","title":"Listas y tuplas","text":"<p>Las listas permiten guardar m\u00e1s de un elemento dentro de una variable, y adem\u00e1s hacerlo en un orden concreto. Pueden contener un n\u00famero ilimitado de elementos de cualquier tipo:</p> <pre><code># Lista vac\u00eda\nlista_vacia = []\n# Lista con valores\nalumnos = [\"Ane\", \"Unai\", \"Itziar\", \"Mikel\"]\n# Acceder a elementos\nprint(alumnos[0]) # muestra \"Ane\"\nprint(alumnos[1]) # muestra \"Unai\"\nprint(alumnos[2]) # muestra \"Itziar\"\nprint(alumnos[-1]) # muestra \"Mikel\"\n# Cambiar un elemento\nalumnos[0] = \"Nora\" \n</code></pre> <p>Los m\u00e9todos m\u00e1s utilizados con las listas son los siguientes:</p> M\u00e9todo Acci\u00f3n <code>alumnos.append(\"Amaia\")</code> Inserta \"Jon\" al final de la lista <code>alumnos.insert(0,\"Amaia\")</code> Inserta \"Amaia\" en la posici\u00f3n 0 <code>alumnos.remove(\"Amaia\")</code> Elimina la primera aparici\u00f3n de \"Amaia\" de la lista <code>alumnos.pop()</code> Elimina el \u00faltimo elemento de la lista <code>alumnos.pop(3)</code> Elimina el cuarto elemento de la lista <code>alumnos.clear()</code> Elimina todos los elementos de la lista <code>alumnos.index(\"Amaia\")</code> Devuelve el \u00edndice de la primera aparici\u00f3n de \"Amaia\" <code>alumnos.sort()</code> Ordena la lista (los elementos deben ser comparables) <code>sorted(alumnos)</code> Devuelve una copia de la lista 'alumnos' ordenada (no ordena la pasada como par\u00e1metro) <code>alumnos.reverse()</code> Ordena la lista en orden inverso <code>alumnos.copy()</code> Devuelve una copia de la lista <code>alumnos.extend(otra_lista)</code> Fusiona las dos listas"},{"location":"listas/#acceder-a-varios-elementos-de-una-lista","title":"Acceder a varios elementos de una lista","text":"<p>Si queremos acceder a un subconjunto de elementos de la lista, es posible hacerlo de la siguiente manera:</p> <pre><code>lista = ['a','b','c','d','e','f']\n# Elementos de la segunda a la cuarta posici\u00f3n\nprint(lista[1:3]) # Salida: ['b', 'c']\n# Elementos desde la primera hasta la cuarta posici\u00f3n\nprint(lista[:3]) # Salida: ['a', 'b', 'c']\n# Elementos desde la tercera posici\u00f3n hasta el final\nprint(lista[2:]) # Salida: ['c', 'd', 'e', 'f']\n</code></pre>"},{"location":"listas/#recorrer-una-lista","title":"Recorrer una lista","text":"<p>La forma habitual de recorrer una lista es mediante la sentencia <code>for</code>, tal y como muestra el ejemplo a continuaci\u00f3n:</p> <p><pre><code>    for elemento in ['Python','JavaScript','JAVA']:\nprint(\"Programo en\", elemento)\n</code></pre> De igual manera se podr\u00eda hacer mediante la sentencia <code>while</code>:</p> <pre><code>lista =  ['Python','JavaScript','JAVA']\ni = 0\nsizeofList = len(lista) \nwhile i &lt; sizeofList :\nprint(lista[i]) \ni += 1\n</code></pre>"},{"location":"listas/#tuplas","title":"Tuplas","text":"<p>Las tuplas son listas inmutables. Es decir, una vez declaradas, no se pueden realizar modificaciones sobre ellas (a\u00f1adir/eliminar elementos o hacer modificaciones sobre ellos). Para definir una tupla se escriben los elementos entre par\u00e9ntesis:</p> <p><pre><code>    valores = (1,2,3,4,5)\nprint(valores)  # Salida: (1, 2, 3, 4, 5) \n# tuple with mixed datatypes\nvalores_mixtos = (1, \"Hola\", 2.5, False)\nprint(valores_mixtos)  # Salida: (1, 'Hola', 2.5, False)\n</code></pre> El acceso a sus elementos se hace de igual que con listas:</p> <pre><code>    valores = (\"a\", \"b\", \"c\",\"d\",\"e\",\"f\")  \nprint(valores[1]) # Salida: 'b'\nprint(valores[2:4]) # Salida: ('c', 'd')\n</code></pre> <p>Una acci\u00f3n t\u00edpica de las tuplas es \"desempaquetar\" (unpack) sus valores, es decir, asignarlos a variables directamente:</p> <pre><code>    tupla = (1, \"Hola\", 2.5) # Creamos la tupla\nvar1, var2, var3 = tupla # Hacemos el unpack\nprint(var1)      # 1\nprint(var2)      # 'Hola' \nprint(var3)      # 2.5\n</code></pre>"},{"location":"listas/#coding-time","title":"Coding time!","text":""},{"location":"listas/#ejercicio-1","title":"Ejercicio 1","text":"<p>Dada la siguiente lista <code>[12, 23, 5, 29, 92, 64]</code> realiza las siguientes operaciones y vete mostrando la lista resultante por pantalla:</p> <ol> <li>Elimina el \u00faltimo n\u00famero y a\u00f1\u00e1delo al principio.</li> <li>Mueve el segundo elemento a la \u00faltima posici\u00f3n.</li> <li>A\u00f1ade el n\u00famero <code>14</code> al comienzo de la lista.</li> <li>Suma todos los n\u00fameros de la lista y a\u00f1ade el resultado al final de la lista.</li> <li>Fusiona la lista actual con la siguiente: <code>[4, 11, 32]</code></li> <li>Elimina todos los n\u00fameros impares de la lista.</li> <li>Ordena los n\u00fameros de la lista de forma ascendente.</li> <li>Vac\u00eda la lista.</li> </ol> <p>Resultado:</p> <pre><code>[64, 12, 23, 5, 29, 92]\n[64, 23, 5, 29, 92, 12]\n[14, 64, 23, 5, 29, 92, 12]\n[14, 64, 23, 5, 29, 92, 12, 239]\n[14, 64, 23, 5, 29, 92, 12, 239, 4, 11, 32]\n[14, 64, 92, 12, 4, 32]\n[4, 12, 14, 32, 64, 92]\n[]\n</code></pre>"},{"location":"listas/#ejercicio-2","title":"Ejercicio 2","text":"<p>Crea un programa que solicite al usuario 5 n\u00fameros y los guarde en una lista. A continuaci\u00f3n el programa pedir\u00e1 otros 5 n\u00fameros al usuario almacen\u00e1ndolos en una segunda lista. </p> <p>El programa mostrar\u00e1 al usuario una lista que contenga los n\u00fameros que tienen en com\u00fan las dos listas anteriores.</p> <ul> <li>Ejemplo: Lista 1 = <code>[6,14,11,78,5]</code> y Lista 2 = <code>[3,14,22,78,9]</code></li> <li>Resultado: <code>[14, 78]</code></li> </ul>"},{"location":"mechanical/","title":"Mechanical Soup","text":""},{"location":"mechanical/#introduccion","title":"Introducci\u00f3n","text":"<p>MechanicalSoup es un paquete de Python que, de forma autom\u00e1tica, env\u00eda cookies, sigue redirecciones y tambi\u00e9n puede seguir hiperenlaces o formularios de un sitio web.</p> <p>Fue creado por M. Hickford debido a su fascinaci\u00f3n por la biblioteca Mechanize. Mechanize fue un proyecto de John J. Lee que permitia navegar de forma program\u00e1tica en Python.</p> <p>Algunas de las caracter\u00edsticas de Mechanize eran:</p> <ul> <li><code>mechanize.browser</code>: que usa <code>urllib2.OpenerDirector</code> para abrir una URL de Internet</li> <li>Completado f\u00e1cil de formularios HTML</li> <li>Revisi\u00f3n autom\u00e1tica de robots.txt</li> <li>Manejo autom\u00e1tica de <code>HTTP-Equiv</code></li> <li>M\u00e9todos de navegador <code>.back()</code> y <code>.reload</code></li> </ul> <p>Desafortunadamente, Mechanize no es compatible con Python3 y, adem\u00e1s, su desarrollo lleva a\u00f1os estancado.</p> <p>En este contexto, Hickford emergi\u00f3 con una soluci\u00f3n: MechanicalSoup que provee la misma API y que est\u00e1 construido sobre las bibliotecas <code>Requests</code> (para las sesiones HTTP) y <code>BeautifulSoup</code> (para datos de navegaci\u00f3n). </p> <p>MechanicalSoup est\u00e1 dise\u00f1ado para imitar el comportamiento de los humanos cuando interact\u00faan con los navegadores web. Algunos de los posibles casos de uso incluyen:</p> <ul> <li>Interactuar con sitios web que no proporcionan API</li> <li>Hacer pruebas de un sitio web que se est\u00e9 desarrollando</li> <li>Navegar a trav\u00e9s de una interfaz</li> </ul>"},{"location":"mechanical/#instalacion-y-comprobacion","title":"Instalaci\u00f3n y comprobaci\u00f3n","text":"<p>Lo primero que deberemos hacer, como siempre, es instalar MechanicalSoup. Podemos hacerlo en nuestro entorno virtual:</p> <pre><code>pipenv shell\npipenv install mechanicalsoup\n</code></pre> <p>O, de forma general, en nuestra m\u00e1quina:</p> <p><pre><code>pipenv install mechanicalsoup\n</code></pre> Comprobemos que no tenemos errores con nuestra nueva biblioteca. Para ello, en el entorno interactivo de Python3:</p> <pre><code>import mechanicalsoup\nbrowser = mechanicalsoup.StatefulBrowser()\nurl = \"http://httpbin.org\"\nbrowser.open(url)\nprint(browser.get_url())\n</code></pre> <p>En el c\u00f3digo de arriba:</p> <ol> <li>Importamos la biblioteca</li> <li><code>mechanicalsoup.StatefulBrowser()</code>crear\u00e1 un objeto de navegador. </li> <li><code>browser.open()</code> brir\u00e1 la p\u00e1gina deseado en segundo plano y devolver\u00e1 un <code>response[200]</code> que es el valor devuelto por <code>open()</code>.     MechanicalSoup usa la biblioteca requests para realizar las peticiones HTTP a los sitios.</li> <li><code>browser.get_url()</code> recoge la URL del sitio y tambi\u00e9n usa requests</li> </ol>"},{"location":"mechanical/#trabajar-con-mechanicalsoup","title":"Trabajar con MechanicalSoup","text":"<p>Siguiendo con el ejemplo anterior, podemos llevar a cabo m\u00e1s acciones, como por ejemplo seguir subdominios de la siguiente forma:</p> <pre><code>browser.follow_link(\"forms\")\nbrowser.get_url()\n</code></pre> <p>Ahora podemos extraer el contenido de la p\u00e1gina:</p> <pre><code>browser.get_current_page()\n</code></pre> <p>que devolver\u00e1 el c\u00f3digo fuente de la p\u00e1gina actual de la misma forma que lo hace la funci\u00f3n <code>prettify</code> de beautifulsoup. Recordemos que MechanicalSoup utiliza BeautifulSoup para la extracci\u00f3n de datos.</p> <p>Para encontrar cualquier etiqueta, podr\u00edamos buscarla as\u00ed:</p> <pre><code>browser.get_current_page().find_all('legend')\n</code></pre>"},{"location":"mechanical/#formularios","title":"Formularios","text":"<p>Tambi\u00e9n podemos encontrar los formularios y hacer peticiones POST con el siguiente comando:</p> <pre><code>browser.select_form('form[action=\"/post\"]')\nbrowser.get_current_form().print_summary()\n</code></pre> <ul> <li>Con <code>select_form()</code> utilizamos un selector CSS, seleccionamos el tag HTML form que tiene al atributo <code>action</code> y cuyo valor es <code>/post</code>. </li> <li><code>print_summary</code> nos mostrar\u00e1 todos los campos disponibles del formulario</li> </ul> <p>Para rellenar el formulario, podemos utilizar los siguientes comandos:</p> <pre><code>browser[\"custname\"] = \"Mohit\"\nbrowser[\"custtel\"] = \"9081515151\"\nbrowser[\"custemail\"] = \"mohitmaithani@aol.com\"\nbrowser[\"comments\"] = \"please make pizza dough more soft\"\nbrowser[\"size\"] = \"large\"\nbrowser[\"topping\"] = \"mushroom\"\n</code></pre> <p>Y, posteriormente, podemos ejecutar el navegador con:</p> <pre><code>browser.launch_browser()\n</code></pre> <ul> <li>La sintaxis <code>browser[\"marcador\"] = \"texto\"</code> se usa para rellenar un formulario</li> <li><code>browser.launch_browser()</code> mostrar\u00e1 el resultado en tiempo real</li> </ul> <p>Y con esto damos por presentados los fundamentos m\u00e1s b\u00e1sicos de MechanicalSoup. Para una documentaci\u00f3n en profundidad acerca de su funcionamiento y opciones, podemos consultar aqu\u00ed.</p>"},{"location":"mechanical/#haciendo-scraping-de-imagenes-de-hackers","title":"Haciendo scraping de im\u00e1genes de hackers","text":"<pre><code>import mechanicalsoup #(1)\nbrowser = mechanicalsoup.StatefulBrowser()\nurl = \"https://www.google.com/imghp?hl=en\"\nbrowser.open(url)\n#obtener el HTML\nbrowser.get_current_page()\n#localizar el input para la b\u00fasqueda\nbrowser.select_form()\nbrowser.get_current_form().print_summary()\n#buscar el t\u00e9rmino concreto\nsearch_term = 'hacker'\nbrowser[\"q\"] = search_term \n#enviar o hacer \"click\" en buscar\nrespuesta = browser.submit_selected()\nprint('nueva url:', browser.get_url())\nprint('respuesta:\\n', respuesta.text[:500])\n#abrir la URL #(2)\nnueva_url = browser.get_url()\nbrowser.open(nueva_url)\n#obtener el c\u00f3digo HTML\npage = browser.get_current_page()\nall_images = page.find_all('img')\n#localizar los atributos de cada imagen\nimage_source = []\nfor image in all_images:\nimage = image.get('src')\nimage_source.append(image)\nimage_source[5:25]\n#guardar los links \"limpios\" en 'image_source'\nimage_source = [image for image in image_source if image.startswith('https')]\nprint(image_source)\nimport os #(4)\npath = os.getcwd()\npath = os.path.join(path, search_term + \"s\")\n#crear el directorio\nos.mkdir(path)\n#imprimir el path donde se van a guardar las im\u00e1genes de hackers\npath\n##Descargar wget descomentando la l\u00ednea de abajo #(5)\n#pip install wget  \n##descargar im\u00e1genes\ncounter = 0\nfor image in image_source:\nsave_as = os.path.join(path, search_term + str(counter) + '.jpg')\nwget.download(image, save_as)\ncounter += 1\n</code></pre> <ol> <li>Buscar im\u00e1genes de hackers en Google. Establecemos la petici\u00f3n/query y hacemos que se abra en el navegador con el texto hackers</li> <li>Navegar a las p\u00e1ginas nuevas y apuntar a todas las im\u00e1genes, lo que devolver\u00e1 la lista de todas las URLs</li> <li>Arreglamos las URLs corruptas. La funci\u00f3n de Python <code>startswith</code> permite filtrar las URLs para que no empiecen por HTTPS</li> <li>Crear un repositorio local para guardar las im\u00e1genes</li> <li>Usamos <code>wget</code> para descargar</li> </ol> <p>Info</p> <p>MechanicalSoop es una composici\u00f3n de las bibliotecas Requests, BeautifulSoup y teniendo algo de las capacidades de Selenium en cuanto navegaci\u00f3n en tiempo real.</p>"},{"location":"mechanical/#referencias","title":"Referencias","text":"<p>MechanicalSoup tutorial - First contact, step by step</p> <p>A Deep Dive Into Web Scraping Using MechanicalSoup</p>"},{"location":"modulos/","title":"M\u00f3dulos y Paquetes","text":""},{"location":"modulos/#introduccion","title":"Introducci\u00f3n","text":"<p>Una de las ventajas de las funciones es c\u00f3mo separan los bloques de c\u00f3digo de su programa principal. Utilizando nombres descriptivos para las funciones, el programa principal ser\u00e1 mucho m\u00e1s f\u00e1cil de seguir. </p> <p>Se puede ir un paso m\u00e1s all\u00e1 almacenando las funciones en un archivo separado llamado m\u00f3dulo y luego importando ese m\u00f3dulo en el programa principal. Una declaraci\u00f3n de importaci\u00f3n le dice a Python que el c\u00f3digo de un m\u00f3dulo est\u00e9 disponible en el programa que se est\u00e1 ejecutando.</p> <p>Almacenar funciones en un archivo separado permite ocultar los detalles de del c\u00f3digo del programa y centrarse en la l\u00f3gica de alto nivel. Tambi\u00e9n permite reutilizar las funciones en muchos programas diferentes.</p> <p>Cuando se almacenan funciones en archivos separados, se pueden compartir esos archivos con otros programadores sin tener que compartir todo el programa. Saber c\u00f3mo importar funciones tambi\u00e9n permite utilizar bibliotecas de funciones que otros programadores han escrito.</p>"},{"location":"modulos/#modulos","title":"M\u00f3dulos","text":"<p>As\u00ed pues, un m\u00f3dulo es un archivo de Python que contiene variables, funciones y clases. Es una forma de ordenar y reutilizar c\u00f3digo ya que todo el contenido de un m\u00f3dulo es accesible por los archivos que lo importen.</p> <pre><code># mundo.py\ndef hola_mundo():\nprint(\"\u00a1Hola Mundo!\")\ndef adios_mundo():\nprint(\"\u00a1Adios Mundo!\")\n</code></pre> <p>Para acceder a las funciones desde otro archivo Python se utiliza la palabra reservada <code>import</code>:</p> <pre><code># app.py\nimport mundo\n# Llamada a la funci\u00f3n\nmundo.hola_mundo()\n</code></pre> <p>Tambi\u00e9n existe la posibilidad de importar \u00fanicamente objetos concretos de un m\u00f3dulo mediante la sintaxis <code>from ... import</code>:</p> <pre><code># app.py\nfrom mundo import adios_mundo\n# Llamada a la funci\u00f3n\nadios_mundo()\n</code></pre> <p>De esta forma no es necesario escribir el nombre del modulo antes de utilizar la funci\u00f3n. De igual manera, se pueden importar varios objetos de un m\u00f3dulo separ\u00e1ndolos por una coma:</p> <pre><code># app.py\nfrom mundo import adios_mundo, hola_mundo\n</code></pre> <p>Para importar todos los los objetos de un m\u00f3dulo basta con utilizar el asterisco:</p> <pre><code># app.py\nfrom mundo import *\n</code></pre>"},{"location":"modulos/#localizacion-de-los-modulos","title":"Localizaci\u00f3n de los m\u00f3dulos","text":"<p>Al importar un m\u00f3dulo Python lo buscara en los siguientes directorios:</p> <ol> <li>En el directorio actual.</li> <li>En los directorios declarados en el <code>PYTHONPATH</code> (variable de entorno que contiene un listado de directorios)</li> <li>En el directorio de instalaci\u00f3n de Python por defecto (en UNIX normalmente '<code>/usr/local/lib/python</code>/')</li> </ol>"},{"location":"modulos/#paquetes","title":"Paquetes","text":"<p>Es posible agrupar los m\u00f3dulos que tienen relaci\u00f3n en un mismo directorio. Estos directorios son conocidos en Python como paquetes y deben contener siempre un archivo llamado <code>__init__.py</code> para que Python lo reconozca como un paquete.</p> <p>A medida que desarrollamos una aplicaci\u00f3n es habitual agrupar los archivos en directorios (paquetes) para tener el c\u00f3digo organizado.</p> <p>Para cargar un m\u00f3dulo ubicado en un paquete lo haremos de la siguiente forma:</p> <p><pre><code>import mipaquete.mundo\n</code></pre> o bien de la siguiente manera: <pre><code>from mipaquete import mundo\n</code></pre> Tambi\u00e9n es posible importar elementos concretos de un m\u00f3dulo: <pre><code>from mipaquete.mundo import adios_mundo, hola_mundo\n</code></pre></p>"},{"location":"operadores/","title":"Operadores y expresiones","text":"<p>Los operadores son s\u00edmbolos especiales que permiten realizar operaciones aritm\u00e9ticas o l\u00f3gicas.</p>"},{"location":"operadores/#operadores-aritmeticos","title":"Operadores aritm\u00e9ticos","text":"<p>Los operadores aritm\u00e9ticos se utilizan para realizar operaciones matem\u00e1ticas (suma, resta, multiplicaci\u00f3n,...). La tabla siguiente contiene todos los operadores aritm\u00e9ticos permitidos por Python:</p> Operador Ejemplo Significado + a + b Suma - a - b Resta - -a Negaci\u00f3n (asignar valor negativo) * a * b Multiplicaci\u00f3n / a / b Divisi\u00f3n % a % b M\u00f3dulo (resto de la divisi\u00f3n) // a // b Divisi\u00f3n entera ** a ** b Exponente <p>Ejemplos:</p> <pre><code>x = 5   \ny = 2\nprint(x + y) # 7\nprint(x - y) # 3\nprint(x * y) # 10\nprint(x / y) # 2.5\n</code></pre>"},{"location":"operadores/#operadores-relacionales-o-de-comparacion","title":"Operadores relacionales o de comparaci\u00f3n","text":"<p>Los operadores relacionales se utilizan para comparar valores y devuelven como resultado un booleano: <code>True</code> o <code>False</code>.</p> Operador Ejemplo Significado &gt; a &gt; b Mayor que: <code>True</code> si a es mayor que b &lt; a &gt; b Menor que: <code>True</code> si a es menor que b == a == b Igual: <code>True</code> si a y b son iguales != a != b Distinto: <code>True</code> si a y b son distintos &gt;= a &gt;= b Mayor o igual: <code>True</code> si a es igual o mayor que b &lt;= a &gt;= b Menor o igual: <code>True</code> si a es igual o menor que b"},{"location":"operadores/#operadores-logicos","title":"Operadores l\u00f3gicos","text":"<p>Los operadores l\u00f3gicos <code>and</code> <code>or</code>, y <code>not</code> eval\u00faan valores devolviendo tambi\u00e9n <code>True</code>o <code>False</code> como resultado:</p> Operador Ejemplo Significado and a and b True si a y b son True or a or b True si a o b son true not not b True si b es falso"},{"location":"operadores/#coding-time","title":"Coding time!","text":""},{"location":"operadores/#ejercicio-1","title":"Ejercicio 1","text":"<p>Crea un programa que solicite al usuario un n\u00famero del 1 al 10 y muestre por pantalla la tabla de multiplicaci\u00f3n del 1 al 10. Ejemplo: <pre><code>Introduce un n\u00famero del 1 al 10: 3\n3 x 1 = 3\n3 x 2 = 6\n3 x 3 = 9\n3 x 4 = 12\n3 x 5 = 15\n3 x 6 = 18\n3 x 7 = 21\n3 x 8 = 24\n3 x 9 = 27\n3 x 10 = 30\n</code></pre></p>"},{"location":"operadores/#ejercicio-2","title":"Ejercicio 2","text":"<p>Crea un programa que solicite al usuario dos n\u00fameros enteros y muestre por pantalla el resultado de las siguientes operaciones: suma, resta, multiplicaci\u00f3n y divisi\u00f3n. Ejemplo:</p> <pre><code>Introduce el primer n\u00famero: 8\nIntroduce el segundo n\u00famero: 2\nLa suma es: 10\nLa resta es: 6\nLa multiplicaci\u00f3n es: 16\nLa divisi\u00f3n es: 4.0\n</code></pre>"},{"location":"operadores/#ejercicio-3","title":"Ejercicio 3","text":"<p>Crea un programa que solicite al usuario el radio de un c\u00edrculo y calcule el \u00e1rea. Nota: Utiliza 3.14159 como n\u00famero PI para el c\u00e1lculo del \u00e1rea.</p> <p>Ejemplo: <pre><code>Introduce el radio: 3\nEl \u00e1rea es: 28.274309999999996\n</code></pre></p>"},{"location":"requests/","title":"Requests","text":"<p>En muchas aplicaciones web es normal conectarse a varios servicios de terceros mediante el uso de APIs. Al utilizar estas APIs puedes acceder a datos como informaci\u00f3n meteorol\u00f3gica, resultados deportivos, listas de pel\u00edculas, tweets, resultados de motores de b\u00fasqueda e im\u00e1genes entre otros ejemplos. </p> <p>Tambi\u00e9n se pueden utilizar las APIs para a\u00f1adir funcionalidad a una aplicaci\u00f3n. Ejemplos de ello son los pagos, la programaci\u00f3n, los correos electr\u00f3nicos, las traducciones, los mapas y las transferencias de archivos. Si tuvieramos que crear cualquiera de ellas por nuestra cuenta, nos llevar\u00eda mucho tiempo, pero con las APIs, podemos tardar s\u00f3lo unos minutos en conectarnos a una y acceder a sus funciones y datos.</p> <p>En esta secci\u00f3n hablaremos sobre la biblioteca Python Requests, que permite enviar peticiones HTTP en Python.</p> <p>Y dado que el uso de una API consiste en enviar peticiones HTTP y recibir respuestas, Requests permite utilizar las API en Python.</p>"},{"location":"requests/#entendiendo-las-peticiones-http","title":"Entendiendo las peticiones HTTP","text":"<p>Las peticiones HTTP son la forma de funcionamiento de la web. Cada vez que navegamos por una p\u00e1gina web, el navegador realiza m\u00faltiples peticiones al servidor web. El servidor responde con todos los datos necesarios para renderizar la p\u00e1gina, y el navegador la renderiza para que podamos verla.</p> <p>El proceso gen\u00e9rico es el siguiente:</p> <ul> <li>Un cliente (como un navegador o un script de Python usando Requests) envia algunos datos a una URL.</li> <li>El servidor del sitio web asociado a esa URL leer\u00e1 los datos, decidir\u00e1 qu\u00e9 hacer con ellos y devolver\u00e1 una respuesta al cliente.</li> <li>Finalmente, el cliente puede decidir qu\u00e9 hacer con los datos de la respuesta.</li> </ul> <p>Parte de los datos que el cliente env\u00eda en una solicitud es el m\u00e9todo de solicitud. Algunos m\u00e9todos de solicitud comunes son <code>GET</code>, <code>POST</code> y <code>PUT</code>. Las peticiones GET son normalmente para leer datos s\u00f3lo sin hacer un cambio en algo, mientras que las peticiones <code>POST</code> y <code>PUT</code> son generalmente para modificar datos en el servidor. </p> <p>Cuando se env\u00eda una solicitud desde un script de Python o dentro de una aplicaci\u00f3n web, el desarrollador puede decidir qu\u00e9 se env\u00eda en cada solicitud y qu\u00e9 se hace con la respuesta.</p>"},{"location":"requests/#instalando-requests","title":"Instalando requests","text":"<p>Podemos o bien instalar de forma global la biblioteca:</p> <pre><code>pipenv install requests\n</code></pre> <p>O bien, utilizar un entorno virtual a tal efecto, como se explica a continuaci\u00f3n.</p> <p>Creamos una carpeta para hacer la prueba:</p> <pre><code>mkdir prueba_r\n</code></pre> <p>Dentro de la carpeta, ejecutamos un nuevo entorno virtual:</p> <pre><code>pipenv shell\n</code></pre> <p>Y, una vez dentro, instalamos la biblioteca:</p> <pre><code>pipenv install requests\n</code></pre>"},{"location":"requests/#probando-requests","title":"Probando requests","text":"<p>Si entramos en el entorno interactivo de Python:</p> <pre><code>python3\n</code></pre> <p>Podemos empezar a jugar con la biblioteca. El primer paso ser\u00e1 importar requests para poder utilizarlo realizando nuestra primera petici\u00f3n <code>GET</code> a una URL e imprimiendo la respuesta (o mejor dicho, su c\u00f3digo HTTP):</p> <pre><code>&gt;&gt;&gt; import requests\n&gt;&gt;&gt; r = requests.get('https://raul-profesor.github.io')\n&gt;&gt;&gt; print(r)\n&lt;Response [200]&gt;\n&gt;&gt;&gt; \n</code></pre> <p>Por mera curiosidad, vamos a ver qu\u00e9 tipo de dato es <code>r</code>:</p> <pre><code>&gt;&gt;&gt; print(type(r))\n&lt;class 'requests.models.Response'&gt;\n</code></pre> <p>Lo que nos dice es que es una instancia de la clase <code>Response</code>. El objeto <code>Response</code> contiene el resultado de la petici\u00f3n HTTP.</p> <p>Nota</p> <p>Para los ejemplos utilizaremos el sitio web httpbin.org. La herramienta httpbin es un servicio gratuito y sencillo de petici\u00f3n y respuesta HTTP que proporciona un conjunto de endpoints URL. Utilizamos estos endpoints para probar varias formas de trabajar con operaciones HTTP. Utilizaremos la herramienta httpbin porque nos ayuda a centrarnos en el aprendizaje de la biblioteca Python Requests sin necesidad de configurar un servidor web real o utilizar un servicio web en l\u00ednea.</p>"},{"location":"requests/#peticiones-get","title":"Peticiones GET","text":"<p>Utilizaremos las peticiones <code>GET</code> para solicitar datos de un servidor web concreto. Probemos:</p> <pre><code>url = 'http://httpbin.org/json'\nr = requests.get(url)\nprint('Response Code:', r.status_code)\nprint('Response Headers:\\n', r.headers)\nprint('Response Content:\\n',r.text)\n</code></pre> <p>Ejecutando el c\u00f3digo de arriba obtenemos un c\u00f3dido de estado 200, el cual indica que la URL es alcanzable o accesible. Tambi\u00e9n devuelve los datos de las cabeceras de la p\u00e1gina, seguido del contenido de la p\u00e1gina.</p> <p>La propiedad <code>headers</code> devuelve un diccionario especial hecho s\u00f3lo para cabeceras HTTP, de tal forma que podamos acceder a cada elemento simplemente usando su key o clave:</p> <pre><code>print(r.headers['Content-Type'])\n</code></pre> <p>Ejecutando el comando de arriba, nos devolver\u00e1 que el tipo de contenido de la p\u00e1gina es <code>application/json</code>.</p> <p>En la \u00faltima l\u00ednea del c\u00f3digo, podemos utilizar la propiedad <code>content</code> que devuelve el contenido de la p\u00e1gina como una serie de bytes, pero preferiremos usar la propiedad <code>text</code> que imprime por pantalla dicho contenido como texto decodificado en formato Unicode.</p>"},{"location":"requests/#usando-parametros-get","title":"Usando par\u00e1metros GET","text":"<p>Usamos los par\u00e1metros <code>GET</code> para pasar informaci\u00f3n en formato de parejas clave-valor hacia un servidor web a trav\u00e9s de una URL. El m\u00e9todo get nos permite pasar un diccionario de claves-valores usando el argumento <code>params</code>. Intentemoslo:</p> <pre><code>url = 'http://httpbin.org/get'\npayload = {\n'website':'dataquest.io',\n'courses':['Python','SQL']\n}\nr = requests.get(url, params=payload)\nprint('Response Content:\\n',r.text)\n</code></pre> <p>Corriendo el c\u00f3digo de arriba, se obtiene una respuesta como esta:</p> <pre><code>Response Content:\n{\n\"args\": {\n\"courses\": [\n\"Python\",\n\"SQL\"\n],\n\"website\": \"dataquest.io\"\n},\n\"headers\": {\n\"Accept\": \"*/*\",\n\"Accept-Encoding\": \"gzip, deflate\",\n\"Host\": \"httpbin.org\",\n\"User-Agent\": \"python-requests/2.27.1\",\n\"X-Amzn-Trace-Id\": \"Root=1-61e7e066-5d0cacfb49c3c1c3465bbfb2\"\n},\n\"origin\": \"172.123.65.155\",\n\"url\": \"http://httpbin.org/get?website=dataquest.io&amp;courses=Python&amp;courses=SQL\"\n}\n</code></pre> <p>El contenido de la respuesta est\u00e1 en formato JSON y el par clave-valor que le pasamos a trav\u00e9s del argumento <code>params</code>  aparece en la secci\u00f3n <code>args</code> de la respuesta. Tambi\u00e9n la secci\u00f3n <code>url</code> contiene la URL codificada junto con los par\u00e1metros que se le han pasado al servidor.</p>"},{"location":"requests/#peticiones-post","title":"Peticiones POST","text":"<p>Usamos la petici\u00f3n POST para enviar datos recogidos de un formulario web a un servidor web. Para llevar a cabo esto con la biblioteca requests, primero necesitamos crear un diccionario de datos y asignarlo al argumento <code>data</code> del m\u00e9todo post:</p> <pre><code>url = 'http://httpbin.org/post'\npayload = {\n'website':'dataquest.io',\n'courses':['Python','SQL']\n}\nr = requests.post(url, data=payload)\nprint('Response Content:\\n',r.text)\n</code></pre> <p>Corriendo el c\u00f3digo de arriba, se obtiene una respuesta como esta:</p> <pre><code>Response Content:\n{\n\"args\": {},\n\"data\": \"\",\n\"files\": {},\n\"form\": {\n\"courses\": [\n\"Python\",\n\"SQL\"\n],\n\"website\": \"dataquest.io\"\n},\n\"headers\": {\n\"Accept\": \"*/*\",\n\"Accept-Encoding\": \"gzip, deflate\",\n\"Content-Length\": \"47\",\n\"Content-Type\": \"application/x-www-form-urlencoded\",\n\"Host\": \"httpbin.org\",\n\"User-Agent\": \"python-requests/2.27.1\",\n\"X-Amzn-Trace-Id\": \"Root=1-61e7ec9f-6333082d7f0b73d317acc1f6\"\n},\n\"json\": null,\n\"origin\": \"172.123.65.155\",\n\"url\": \"http://httpbin.org/post\"\n}\n</code></pre> <p>Esta vez los datos enviados a trav\u00e9s del m\u00e9todo post aparecen en la secci\u00f3n <code>form</code> de la respuesta, en lugar de en <code>args</code> porque en vez de enviar los datos como par\u00e1metros dentro de la URL, los enviamos como datos codificados de un formulario.</p>"},{"location":"requests/#manejando-excepciones","title":"Manejando excepciones","text":"<p>Cuando nos comunicamos con un servidor remoto, pueden ocurrir excepciones. Por ejemplo, el servidor puede ser inalcanzable, la URL no existir en el servidor, o el servidor no responder en un marco de tiempo adecuado. Veamos como detectar y resolver errores HTTP usando la clase <code>HTTPError</code> de la biblioteca requests:</p> <pre><code>import requests\nfrom requests import HTTPError\nurl = \"http://httpbin.org/status/404\"\ntry:\nr = requests.get(url)\nr.raise_for_status()\nprint('Response Code:', r.status_code)\nexcept HTTPError as ex:\nprint(ex)\n</code></pre> <p>En el c\u00f3digo de arriba, importamos la clase <code>HTTPError</code> para capturar y resolver las excepciones HTTP. Tras ello, realizamos una petici\u00f3n a un endpoint en <code>httpbin.org</code>, el cual genera un c\u00f3digo de estado 404. El m\u00e9todo <code>raise_for_status()</code> genera una excepci\u00f3n siempre que la respuesta HTTP contenga un c\u00f3dio de error (un error de cliente del tipo 4XX o una respuesta de error del servidor del tipo 5XX). </p> <p>La biblioteca requests no genera una excepci\u00f3n autom\u00e1ticamente una vez ocurre un error. Es por ello que necesitamos usar el m\u00e9todo <code>raise_for_status()</code> para identificar si un c\u00f3digo de estado de error ha ocurrido o no. Finalmente, el manejador de excepciones bloquea la captura del error y lo imprime tal que as\u00ed:</p> <pre><code>404 Client Error: NOT FOUND for url: http://httpbin.org/status/404\n</code></pre> <p>Note</p> <p>Si intentamos acceder al endpoint <code>http://httpbin.org/status/200</code>, la salida del c\u00f3digo de arriba ser\u00e1 <code>Response Code: 200</code> porque el c\u00f3digo de estado no est\u00e1 en el rango de c\u00f3digos de estado de error. El m\u00e9todo <code>raise_for_status()</code> devolver\u00e1 <code>None</code>, que no har\u00e1 saltar al manejador de excepciones.</p> <p>Adem\u00e1s del manejo de excepciones que acabamos de ver, veremos c\u00f3mo resolver los timeouts. Esto es crucial porque necesitaremos asegurarnos de que nuestra aplicaci\u00f3n no se queda esperando indefinidamente. Si una petici\u00f3n agota el tiempo de espera, produce una excepci\u00f3n del tiempo Timeout. Para especificar qu\u00e9 n\u00famero de segundos consideraremos como timeout, podemos usar el argumento <code>timeout</code>:</p> <pre><code>import requests\nfrom requests import Timeout\nurl = \"http://httpbin.org/delay/10\"\ntry:\nr = requests.get(url, timeout=3)\nprint('Response Code:', r.status_code)\nexcept Timeout as ex:\nprint(ex)\n</code></pre> <p>En primer lugar importamos la clase Timeout para resolver la excepciones de tipo timeout y proporcionarnamos una URL que hace referencia a un endpoint con un delay de 10 segundos para probar nuestro c\u00f3digo.</p> <p>Tras esto, establecemos el argumento timeout a un valor de 3 segundos, lo que provocar\u00e1 que si el servidor no resuelve la petici\u00f3n get en 3 segundos, se genere una excepci\u00f3n. El manejador de excepciones capturar\u00e1 cualquier error de timeout y lo mostrar\u00e1.</p> <p>As\u00ed pues, el c\u00f3digo de arriba b\u00e1sicamente muestra el siguiente mensaje d error porque el servidor no responder\u00e1 en el tiempo indicado: </p> <pre><code>HTTPConnectionPool(host='httpbin.org', port=80): Read timed out. (read timeout=3)\n</code></pre>"},{"location":"requests/#autenticacion","title":"Autenticaci\u00f3n","text":"<p>La biblioteca requests soporta varios tipos de autenticaci\u00f3n web, como la autenticaci\u00f3n b\u00e1sica, digest, las dos versiones de 0Auth... Podemos usar estos m\u00e9todos de autenticaci\u00f3n cuando queramos trabajar con cualquier tipo de fuente de datos que requiera loguearnos.</p> <p>Implementaremos la autenticaci\u00f3n b\u00e1sica usando <code>HTTPBin</code> con el siguiente ejemplo. El endpoint para la autenticaci\u00f3n b\u00e1sica es <code>/basic-auth/{user}/{password}</code>. Por ejemplo, si quisi\u00e9ramos usar el siguiente endpoint: <code>http://httpbin.org/basic-auth/data/quest</code>, podemos autenticarnos utilizando el utilizando el nombre data y el  password quest asign\u00e1ndolos como una tupla al argumento <code>auth</code>. </p> <p>Una vez autenticados satisfactoriamente, nos responder\u00e1 con los datos en formato JSON:</p> <p><code>{ \"authenticated\": true, \"user\": \"data\"}</code></p> <p>As\u00ed pues, ejecutando el siguiente c\u00f3digo:</p> <pre><code>import requests\nr = requests.get('http://httpbin.org/basic-auth/data/quest', auth=('data', 'quest'))\nprint('Response Code:', r.status_code)\nprint('Response Content:\\n', r.text)\n</code></pre> <p>Obtenemos la siguiente salida:</p> <pre><code>Response Code: 200\nResponse Content:\n {\n  \"authenticated\": true,\n  \"user\": \"data\"\n}\n</code></pre> <p>Si introducimos un nombre de usuario o un password incorrecto, la salida mostrar\u00e1:</p> <pre><code>Response Code: 401\nResponse Content:\n</code></pre>"},{"location":"requests/#referencias","title":"Referencias","text":"<p>Documentaci\u00f3n de biblioteca requests</p> <p>Tutorial: An Introduction to Python Requests Library</p>"},{"location":"variables/","title":"Variables","text":""},{"location":"variables/#valores","title":"Valores","text":"<p>Un valor es una de las cosas b\u00e1sicas que utiliza un programa, como una letra o un n\u00famero. Los valores que hemos visto hasta ahora han sido 1, 2, y \u201c\u00a1Hola, mundo!\u201d</p> <p>Esos valores pertenecen a tipos diferentes: 2 es un entero <code>int</code>, y \u201c\u00a1Hola, mundo!\u201d es una cadena <code>string</code>, que recibe ese nombre porque  contiene una cadena de letras. Vosotros (y el int\u00e9rprete) podr\u00e9is identificar las cadenas porque van encerradas entre comillas.</p>"},{"location":"variables/#variables-y-tipos-de-datos","title":"Variables y tipos de datos","text":"<p>Una de las caracter\u00edsticas m\u00e1s potentes de un lenguaje de programaci\u00f3n es la capacidad de manipular variables. Una variable es un nombre que se refiere a un valor.</p> <p>Una sentencia de asignaci\u00f3n crea variables nuevas y les da valores:</p> <p></p> <p>En Python cada valor que exista, tiene un tipo de dato, pero no es necesario declarar el tipo de las variables. \u00bfComo funciona? Basado en cada asignaci\u00f3n a la variable, Python deduce el tipo que es y lo conserva internamente.</p> <p>Python proporciona muchos tipos de dato nativos. A continuaci\u00f3n se muestran los m\u00e1s importantes:</p> <ol> <li>Booleanos: Su valor es True o False.</li> <li>N\u00fameros: Pueden ser enteros (1, 2, 3,...), flotantes (1.1, 1.2, 1.3,...)1, fracciones (1/2, 1/3, 2/3,...), o incluso n\u00fameros complejos (ra\u00edz de -1).</li> <li>Cadenas: Son secuencias de caracteres Unicode, por ejemplo, un documento HTML.</li> </ol> <p>Como tipos de datos, destacaremos:</p> <ol> <li>Bytes y arrays de bytes: por ejemplo, un fichero de im\u00e1genes JPEG.</li> <li>Listas: Son secuencias ordenadas de valores.</li> <li>Tuplas: Son secuencias ordenadas e inmutables de valores.</li> <li>Conjuntos: Son \u201cbolsas\u201d de valores sin ordenar.</li> <li>Diccionarios: Son \u201cbolsas\u201d de sin ordenar de parejas clave-valor. Es posible buscar directamente por clave.</li> </ol> <p>En la imagen anterior ve\u00edamos que ten\u00edamos valores de tipo n\u00famero entero <code>int</code>, de tipo coma flotante <code>float</code>, as\u00ed como una cadena de tipo string <code>str</code>.</p> <p>El nombre de una variable se conoce como identificador, y deber\u00e1 cumplir las siguientes reglas:</p> <ul> <li>Comenzar con una letra o un gui\u00f3n bajo.</li> <li>El resto del nombre estar\u00e1 formado por letras, n\u00fameros o guiones bajos.</li> <li>Los nombres de las variables son case sensitive, es decir, no es lo mismo que una variable se llame <code>resultado</code> que <code>RESULTADO</code>.</li> <li> <p>Existen una serie de palabras reservadas que no se pueden utilizar:</p> <p></p> </li> </ul> <p>Algunas de las recomendaciones respecto a los nombres de las variables est\u00e1n recogidas en la Gu\u00eda oficial de Estilos PEP8 de Python. Entre las m\u00e1s habituales encontramos las siguientes:</p> <ul> <li>Utilizar nombres descriptivos, en min\u00fasculas y separados por guiones bajos si fuese necesario: <code>resultado</code>, <code>mi_variable</code>, <code>valor_anterior</code>,...</li> <li>Escribir las constantes en may\u00fasculas: <code>MI_CONSTANTE</code>, <code>NUMERO_PI</code>, ...</li> <li>Antes y despu\u00e9s del signo <code>=</code>, debe haber uno (y solo un) espacio en blanco.</li> </ul> <p>Nota</p> <p>No olvideis que lo que la gu\u00eda plantea son recomendaciones y no obligaciones. Por ejemplo, mientras PEP8 recomienda tabular el c\u00f3digo con 4 espacioes en blanco, la gu\u00eda particular de los desarrolladores de Google habla de 2 espacios en lugar de 4.</p>"},{"location":"variables/#lectura-de-datos-en-python","title":"Lectura de datos en Python","text":"<p>La funci\u00f3n <code>input()</code> permite introducir datos al usuario:</p> <pre><code>&gt;&gt;&gt; nombre = input()\nLeire\n&gt;&gt;&gt; print(nombre)\nLeire\n</code></pre> <p>Como se puede ver en el siguiente ejemplo, es posible tambi\u00e9n mostrar un mensaje al usuario, tal y como muestra el siguiente ejemplo.</p> <pre><code>&gt;&gt;&gt; nombre = input(\"Escribe tu nombre: \")\nEscribe tu nombre: Leire\n&gt;&gt;&gt; print(nombre)\nLeire\n</code></pre>"},{"location":"variables/#numeros","title":"N\u00fameros","text":"<p>Python soporta dos tipos de n\u00fameros: enteros (integer) y de punto flotante (float).</p> <p>```python</p>"},{"location":"variables/#integer","title":"integer","text":"<p>x = 5 print(x)</p>"},{"location":"variables/#float","title":"float","text":"<p>y = 5.0 print(y)</p>"},{"location":"variables/#otra-forma-de-declarar-un-float","title":"Otra forma de declarar un float","text":"<p>z = float(5) print(z) <pre><code>Si tenemos dudas del valor de una variable, podemos mostrar su tipo utilizando la funci\u00f3n `type()`:\n\n```python\n&gt;&gt;&gt; x = 5.5\n&gt;&gt;&gt; type(x)\n&lt;class 'float'&gt;\n</code></pre></p>"},{"location":"variables/#cadenas-de-texto-string","title":"Cadenas de texto (string)","text":"<p>Las cadenas de texto o strings se definen mediante comilla simple (<code>' '</code>) o doble comilla (<code>\" \"</code>):</p> <pre><code>mi_nombre = 'Ane'\nprint(mi_nombre)\nmi_nombre= \"Ane\"\nprint(mi_nombre)\n</code></pre> <p>La diferencia principal se encuentra en que las comillas dobles aportan mayor facilidad en textos que incluyan ap\u00f3strofes:</p> <pre><code>mi_nombre = 'I\\'m John'\nprint(mi_nombre)\nmi_nombre= \"I'm John\"\nprint(mi_nombre)\n</code></pre> <p>M\u00e1s informaci\u00f3n sobre strings y car\u00e1cteres especiales en:  https://docs.python.org/3/tutorial/introduction.html#strings</p> <p>Para definir strings multi-l\u00ednea se utiliza la triples comillas (<code>\"\"\"</code>):</p> <pre><code>frase = \"\"\" esto es una\n        frase muy larga de m\u00e1s de\n        una l\u00ednea ...\"\"\"\n</code></pre>"},{"location":"variables/#concatenacion-de-strings","title":"Concatenaci\u00f3n de strings","text":"<p>Es posible unir dos strings con el operador <code>+</code>:</p> <pre><code>&gt;&gt;&gt; primera_palabra = 'Hola'\n&gt;&gt;&gt; frase_completa = primera_palabra + ', mundo'\n&gt;&gt;&gt; print(frase_completa)\n'Hola, mundo'\n&gt;&gt;&gt; segunda_palabra = 'mundo'\n&gt;&gt;&gt; frase_completa = primera_palabra + ', ' + segunda_palabra\n&gt;&gt;&gt; print(frase_completa)\n'Hola, mundo'\n</code></pre> <p>M\u00e9todo alternativo 1: str.join(): El m\u00e9todo <code>join()</code> recibe como argumento el listado (de tipo List, Tuple, String, Dictionary y Set) de strings que se desean concatenar. Se invoca sobre el separador que se utilizar\u00e1 para unir las cadenas (el cual a su vez es un string tambi\u00e9n):</p> <pre><code>&gt;&gt;&gt; strings = ['do', 're', 'mi']\n&gt;&gt;&gt; separador = ' - '\n&gt;&gt;&gt; separador.join(strings)\n'do - re - mi'\n</code></pre> <p>Para iterar un elemento detr\u00e1s del otro se introducir\u00e1 string vac\u00edo como separador:</p> <pre><code>&gt;&gt;&gt; strings = ['do', 're', 'mi']\n&gt;&gt;&gt; ''.join(strings)\n'doremi'\n</code></pre> <p>M\u00e9todo alternativo 2: <code>str.format()</code>: Python 3 introdujo una nueva forma para formatear strings, la cual sustituye a la anterior en la que se hace uso del operador <code>%</code>. Para ello se invoca el m\u00e9todo <code>format()</code> de un string:</p> <pre><code># Ordenado por defecto:\nfrase = \"Meses: {}, {} y {}\".format('Enero','Febrero','Marzo')\nprint(frase)\n# Especificar el orden indicando la posici\u00f3n:\nfrase = \"Meses: {1}, {0} y {2}\".format('Enero','Febrero','Marzo')\nprint(frase)\n# Especificar el orden mediante parejas clave-valor:\nfrase = \"Meses: {ene}, {feb} y {mar}\".format(ene='Enero', feb='Febrero',mar='Marzo')\nprint(frase)\n</code></pre>"},{"location":"variables/#cadenas-f-f-strings","title":"Cadenas 'f' (f-strings)","text":"<p>La versi\u00f3n 3.6 de Python trajo un gran avance a la hora de integrar variables o expreiones en cadenas de car\u00e1cteres. Se introdujeron las llamadas <code>f-strings</code>, una forma m\u00e1s c\u00f3moda y directa para insertar variables y expresiones en cadenas. Permiten introducir cualquier variable o expresi\u00f3n dentro de un string incluyendo la variable entre llaves <code>{</code> y <code>}</code>.</p> <p>Veamos un ejemplo:</p> <pre><code>nombre = \"Nora\"\nedad = 22\nsaludo = f\"Me llamo {nombre} y tengo {edad} a\u00f1os.\"\n</code></pre> <p>Para indicar que se trata de un <code>f-string</code>, este deber\u00e1 incluir la letra 'f' antes del comiendo de la cadena (antes de las comillas). A continuaci\u00f3n se muestra otro ejemplo en el que se introduce una expresi\u00f3n:</p> <pre><code>a = 4\nb = 3\nprint(f\"La multiplicaci\u00f3n de {a} y {b} es igual a {a * b}\")\n</code></pre>"},{"location":"variables/#conversion-de-tipos","title":"Conversi\u00f3n de tipos","text":"<p>A la hora de concatenar un string con otras variables como <code>integer</code> o <code>float</code> puede haber problemas:</p> <pre><code>&gt;&gt;&gt; edad = 25\n&gt;&gt;&gt; nota_media = 7.3\n&gt;&gt;&gt; print(\"Tengo \" + edad + \" a\u00f1os y mi nota media es \" + nota_media + \".\")\nTraceback (most recent call last):\nFile \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nTypeError: can only concatenate str (not \"int\") to str\n</code></pre> <p>Mediante la funci\u00f3n <code>str()</code> podemos convertir un valor a string y evitar as\u00ed cualquier tipo de problema:</p> <pre><code>&gt;&gt;&gt; edad = 25\n&gt;&gt;&gt; nota_media = 7.3\n&gt;&gt;&gt; print(\"Tengo \" + str(edad) + \" a\u00f1os y mi nota media es \" + str(nota_media) + \".\")\nTengo 25 a\u00f1os y mi nota media es 7.3.\n</code></pre> <p>De igual manera es posible convertir a otros tipos con las funciones <code>int()</code>, <code>float()</code> and <code>bool()</code>.</p>"},{"location":"variables/#metodos-en-cadenas-de-texto-string","title":"M\u00e9todos en cadenas de texto (string)","text":"<p>Es posible obtener un car\u00e1cter concreto de un string utilizando los corchetes <code>[]</code> y el \u00edndice del car\u00e1cter al que queremos acceder:</p> <pre><code>frase = 'Aprendiendo a programar en Python'\nfrase[0] # devuelve el primer caracter\nfrase[1] # devuelve el segundo caracter\nfrase[-1] # devuelve el primer caracter empezando por el final\nfrase[-2] # # devuelve el segundo caracter empezando por el final\n</code></pre> <p>Si queremos obtener un substring, utilizaremos la siguiente notaci\u00f3n:</p> <pre><code>frase = 'Aprendiendo a programar en Python'\nmi_substring = frase[1:5] \n# devuelver\u00e1 los caracteres desde la posici\u00f3n 1 hasta la 5 (no incluye el 5)\n</code></pre> <p>En caso de dejar la primera variable vac\u00eda, se considera la primera posici\u00f3n del string. Dejando la segunda variable vac\u00eda se considera la \u00faltima posici\u00f3n del string:</p> <pre><code>&gt;&gt;&gt; frase = 'Aprendiendo a programar en Python'\n&gt;&gt;&gt; mi_substring = frase[:5]\n&gt;&gt;&gt; mi_substring\n'Apren'\n&gt;&gt;&gt; mi_substring = frase[4:]\n&gt;&gt;&gt; mi_substring\n'ndiendo a programar en Python'\n</code></pre> <p>Otros m\u00e9todos \u00fatiles de string:</p> <pre><code>len(str) # devuelve la longitud del string\nstr.upper() # convierte a may\u00fasculas\nstr.lower() # convierte a min\u00fasculas\nstr.title() # convierte a may\u00fasculas la primera letra de cada palabra\nstr.count(substring [, inicio, fin]) # devuelve el n\u00famero de veces que aparece\n# el substring en el string. Opcionalmente se puede indicar el inicio y fin. \nstr.find(\u2018d\u2019) # devuelve el \u00edndice de la primera aparici\u00f3n de 'd'\n# (devolver\u00e1 -1 si no lo encuentra)\nsubstr in str # devuelve True si el string contiene el substring\nstr.replace(old, new [, count]) # reemplaza 'old' por 'new' un m\u00e1ximo de 'count' veces.\nstr.isnumeric() # devuelve True si str contiene solamente n\u00fameros\n</code></pre>"},{"location":"variables/#coding-time","title":"Coding time!","text":""},{"location":"variables/#ejercicio-1","title":"Ejercicio 1","text":"<p>Escribe un programa que contenga las siguientes variables:</p> <ul> <li><code>nombre</code>: tipo string y valor \"Michael Jordan\"</li> <li><code>edad</code>: tipo integer y valor 50</li> <li><code>media_puntos</code>: tipo float y valor 28.5</li> <li><code>activo</code>: False</li> </ul> <p>El programa deber\u00e1 mostrar en pantalla todos los valores.</p>"},{"location":"variables/#ejercicio-2","title":"Ejercicio 2","text":"<p>Escribe un programa que solicite el nombre, DNI y edad, lo almacene en 3 variables distintas y muestre por pantalla los valores introducidos.</p>"},{"location":"variables/#ejercicio-3","title":"Ejercicio 3","text":"<p>Escribe un programa que genere un string compuesto por los primeros 3 caracteres y los \u00faltimos 3 caracteres de un string introducido por el usuario. Pista: tendr\u00e1s que utilizar la funci\u00f3n <code>len()</code> en la obtenci\u00f3n de los \u00faltimos 3 caracteres.</p> <ul> <li>Ejemplo 1: 'aprendiendo'  </li> <li>Resultado 1: 'aprndo'  </li> <li>Ejemplo 2: 'escribiendo c\u00f3digo'  </li> <li>Resultado 2: 'escigo' </li> </ul>"},{"location":"variables/#ejercicio-4","title":"Ejercicio 4","text":"<p>Escribe un programa que solicite al usuario dos n\u00fameros y una frase. El primer n\u00famero introducido se corresponder\u00e1 a la posici\u00f3n de inicio del substring que deber\u00e1 mostrar el programa por pantalla. El segundo n\u00famero indicar\u00e1 la longitud de dicho substring.</p> <ul> <li>Ejemplo 1: Posicion=4, Longitud=8, Frase='Desarrollar es mi nueva afici\u00f3n'  </li> <li>Resultado 1: \"rrollar \"  </li> <li>Ejemplo 2: Posicion=8, Longitud=11, Frase='Bienvenido a la clase de programaci\u00f3n'</li> <li>Resultado 2: \"do a la cla\"</li> </ul>"},{"location":"variables/#ejercicio-5","title":"Ejercicio 5","text":"<p>Escribe un programa que solicite al usuario una frase. A continuaci\u00f3n le solicitar\u00e1 la letra que quiere reemplazar y por qu\u00e9 letra deber\u00e1 reemplazarse. Por \u00faltimo el programa mostrar\u00e1 el n\u00famero de veces que la letra est\u00e1 presente en la frase y el resultado final tras reemplazarla.</p> <ul> <li>Ejemplo: 'Desarrollar es mi nuevo pasatiempos', 'a','e'</li> <li>Resultado: 4 apariciones. 'Deserroller es mi nueve pesetiempos'  </li> </ul> <ol> <li> <p>Los n\u00fameros decimales se representan utilizando un punto decimal. Aunque en espa\u00f1ol utilizamos la coma decimal usaremos aqu\u00ed el punto decimal por ser el formato que se requiere en Python.\u00a0\u21a9</p> </li> </ol>"}]}